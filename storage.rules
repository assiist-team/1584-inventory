rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isNotAnonymous() {
      return request.auth != null && request.auth.uid != null;
    }

    function getUserRole() {
      return request.auth != null && request.auth.uid != null ?
        firestore.get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('role', null) : null;
    }

    function hasRole() {
      return getUserRole() != null;
    }

    function isOwner() {
      return getUserRole() == 'owner';
    }

    function isAdmin() {
      return getUserRole() == 'admin' || isOwner();
    }

    function isDesigner() {
      return getUserRole() == 'designer' || isAdmin();
    }

    function isViewer() {
      return getUserRole() == 'viewer' || isDesigner();
    }

    // Allow authenticated users to read files (for displaying uploaded images)
    allow read: if isNotAnonymous();

    // Allow authenticated users to upload to project-specific paths
    match /{projectName}/{allPaths=**} {
      allow read, write: if isNotAnonymous();
    }

    // Fallback: Allow authenticated users to write
    allow write: if isNotAnonymous();
  }
}
