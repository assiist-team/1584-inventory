rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isNotAnonymous() {
      return request.auth != null && request.auth.uid != null;
    }

    function getUserRole() {
      return request.auth != null && request.auth.uid != null &&
        exists(/databases/{database}/documents/users/$(request.auth.uid)) ?
        get(/databases/{database}/documents/users/$(request.auth.uid)).data.role : null;
    }

    function hasRole() {
      return getUserRole() != null;
    }

    function isOwner() {
      return getUserRole() == 'owner';
    }

    function isAdmin() {
      return getUserRole() == 'admin' || isOwner();
    }

    function isDesigner() {
      return getUserRole() == 'designer' || isAdmin();
    }


    // Check if user is authenticated (simplified - no role checking for new users)
    function isAuthenticatedUser() {
      return isNotAnonymous();
    }

    // Users can read and write their own user document (requires proper authentication, not anonymous)
    match /users/{userId} {
      allow read, write: if isNotAnonymous() && request.auth.uid == userId;
      allow read: if isNotAnonymous() && isAdmin(); // Admins can read all user documents
    }

    // Invitations - only admins can manage invitations
    match /invitations/{invitationId} {
      allow read, write: if isNotAnonymous() && isAdmin();
    }

    // Projects - authenticated users can access (role-based for existing users)
    match /projects/{projectId} {
      allow read: if isAuthenticatedUser();
      allow write: if isAuthenticatedUser() && (isDesigner() || !hasRole());
      allow delete: if isAuthenticatedUser() && (isAdmin() || !hasRole());
    }

    // Items - authenticated users can access (unified collection)
    match /items/{itemId} {
      allow read: if isAuthenticatedUser();
      allow write: if isAuthenticatedUser() && (isDesigner() || !hasRole());
      allow delete: if isAuthenticatedUser() && (isAdmin() || !hasRole());
    }

    // Transactions - authenticated users can access
    match /projects/{projectId}/transactions/{transactionId} {
      allow read: if isAuthenticatedUser();
      allow write: if isAuthenticatedUser() && (isDesigner() || !hasRole());
      allow delete: if isAuthenticatedUser() && (isAdmin() || !hasRole());

      // Allow arrayUnion/arrayRemove operations for item_ids management
      // This is needed for inventory allocation flows
      allow update: if isAuthenticatedUser() && (isDesigner() || !hasRole()) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['item_ids', 'last_updated', 'amount', 'status', 'payment_method', 'transaction_date']);
    }

    // Legacy business_inventory collection (for backwards compatibility)
    match /business_inventory/{itemId} {
      allow read, write, delete: if isAuthenticatedUser();
    }

    // Legacy project items subcollections (for backwards compatibility)
    match /projects/{projectId}/items/{itemId} {
      allow read, write, delete: if isAuthenticatedUser();
    }

    // No anonymous access allowed for any other documents
    // All access requires proper user authentication
    match /{document=**} {
      allow read, write: if false; // Block all access by default
    }
  }
}
