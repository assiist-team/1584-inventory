{"version":3,"file":"useNavigationContext.js","sources":["../../src/hooks/useNavigationContext.ts"],"sourcesContent":["import { useLocation } from 'react-router-dom'\n\nexport interface NavigationContext {\n  getBackDestination: (defaultPath: string) => string\n  getNavigationSource: () => string | null\n  buildContextUrl: (targetPath: string, additionalParams?: Record<string, string>) => string\n}\n\nexport function useNavigationContext(): NavigationContext {\n  const location = useLocation()\n  const searchParams = new URLSearchParams(location.search)\n\n  return {\n    getBackDestination: (defaultPath: string) => {\n      // Check for returnTo parameter first (highest priority)\n      const returnTo = searchParams.get('returnTo')\n      if (returnTo) return returnTo\n\n      // Check for from parameter and handle accordingly\n      const from = searchParams.get('from')\n      switch (from) {\n        case 'business-inventory-item':\n          // If we're on a project page and came from business inventory item\n          if (location.pathname.startsWith('/project/')) {\n            return returnTo || '/business-inventory'\n          }\n          break\n        case 'transaction':\n          // If we're on an item page and came from transaction\n          if (location.pathname.startsWith('/item/')) {\n            const projectId = searchParams.get('project')\n            const transactionId = searchParams.get('transactionId')\n            if (projectId && transactionId) {\n              return `/project/${projectId}/transaction/${transactionId}`\n            }\n          }\n          break\n      }\n\n      return defaultPath\n    },\n\n    getNavigationSource: () => {\n      return searchParams.get('from')\n    },\n\n    buildContextUrl: (targetPath: string, additionalParams?: Record<string, string>) => {\n      const url = new URL(targetPath, window.location.origin)\n      const currentParams = new URLSearchParams(location.search)\n\n      // Preserve navigation context\n      const from = currentParams.get('from')\n      if (from) url.searchParams.set('from', from)\n\n      // Add current path as returnTo for back navigation\n      // Always set returnTo to current path to maintain navigation stack\n      url.searchParams.set('returnTo', location.pathname + location.search)\n\n      // Add any additional parameters\n      if (additionalParams) {\n        Object.entries(additionalParams).forEach(([key, value]) => {\n          url.searchParams.set(key, value)\n        })\n      }\n\n      return url.pathname + url.search\n    }\n  }\n}\n"],"names":["useNavigationContext","location","useLocation","searchParams","defaultPath","returnTo","projectId","transactionId","targetPath","additionalParams","url","from","key","value"],"mappings":"gCAQO,SAASA,GAA0C,CACxD,MAAMC,EAAWC,EAAA,EACXC,EAAe,IAAI,gBAAgBF,EAAS,MAAM,EAExD,MAAO,CACL,mBAAqBG,GAAwB,CAE3C,MAAMC,EAAWF,EAAa,IAAI,UAAU,EAC5C,GAAIE,EAAU,OAAOA,EAIrB,OADaF,EAAa,IAAI,MAAM,EAC5B,CACN,IAAK,0BAEH,GAAIF,EAAS,SAAS,WAAW,WAAW,EAC1C,OAAOI,GAAY,sBAErB,MACF,IAAK,cAEH,GAAIJ,EAAS,SAAS,WAAW,QAAQ,EAAG,CAC1C,MAAMK,EAAYH,EAAa,IAAI,SAAS,EACtCI,EAAgBJ,EAAa,IAAI,eAAe,EACtD,GAAIG,GAAaC,EACf,MAAO,YAAYD,CAAS,gBAAgBC,CAAa,EAE7D,CACA,KAAA,CAGJ,OAAOH,CACT,EAEA,oBAAqB,IACZD,EAAa,IAAI,MAAM,EAGhC,gBAAiB,CAACK,EAAoBC,IAA8C,CAClF,MAAMC,EAAM,IAAI,IAAIF,EAAY,OAAO,SAAS,MAAM,EAIhDG,EAHgB,IAAI,gBAAgBV,EAAS,MAAM,EAG9B,IAAI,MAAM,EACrC,OAAIU,GAAMD,EAAI,aAAa,IAAI,OAAQC,CAAI,EAI3CD,EAAI,aAAa,IAAI,WAAYT,EAAS,SAAWA,EAAS,MAAM,EAGhEQ,GACF,OAAO,QAAQA,CAAgB,EAAE,QAAQ,CAAC,CAACG,EAAKC,CAAK,IAAM,CACzDH,EAAI,aAAa,IAAIE,EAAKC,CAAK,CACjC,CAAC,EAGIH,EAAI,SAAWA,EAAI,MAC5B,CAAA,CAEJ"}