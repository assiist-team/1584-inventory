{"version":3,"file":"BudgetProgress.js","sources":["../../src/components/ProjectForm.tsx","../../src/components/ui/BudgetProgress.tsx"],"sourcesContent":["import { useState } from 'react'\nimport { X, DollarSign } from 'lucide-react'\nimport { ProjectBudgetCategories } from '@/types'\n\ninterface ProjectFormData {\n  name: string;\n  description: string;\n  clientName: string;\n  budget?: number;\n  designFee?: number;\n  budgetCategories?: ProjectBudgetCategories;\n}\n\ninterface ProjectFormProps {\n  onSubmit: (data: ProjectFormData) => Promise<void>;\n  onCancel: () => void;\n  isLoading?: boolean;\n  initialData?: Partial<ProjectFormData>;\n}\n\nexport default function ProjectForm({ onSubmit, onCancel, isLoading = false, initialData }: ProjectFormProps) {\n  const isEditing = Boolean(initialData?.name)\n\n  const [formData, setFormData] = useState<ProjectFormData>({\n    name: initialData?.name || '',\n    description: initialData?.description || '',\n    clientName: initialData?.clientName || '',\n    budget: initialData?.budget || undefined,\n    designFee: initialData?.designFee || undefined,\n    budgetCategories: initialData?.budgetCategories || undefined,\n  })\n\n  const [errors, setErrors] = useState<Record<string, string>>({})\n\n  const handleChange = (field: keyof ProjectFormData, value: string | number | ProjectBudgetCategories) => {\n    if (field === 'budgetCategories' && typeof value === 'object') {\n      setFormData(prev => ({ ...prev, [field]: value }))\n    } else {\n      const processedValue = typeof value === 'number' && value === 0 ? undefined : value\n      setFormData(prev => ({ ...prev, [field]: processedValue }))\n    }\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }))\n    }\n  }\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {}\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Project name is required'\n    }\n\n    if (!formData.clientName.trim()) {\n      newErrors.clientName = 'Client name is required'\n    }\n\n    // Budget and design fee are optional, but if provided, should be valid numbers\n    if (formData.budget !== undefined && (isNaN(formData.budget) || formData.budget < 0)) {\n      newErrors.budget = 'Budget must be a positive number'\n    }\n\n    if (formData.designFee !== undefined && (isNaN(formData.designFee) || formData.designFee < 0)) {\n      newErrors.designFee = 'Design fee must be a positive number'\n    }\n\n    setErrors(newErrors)\n    return Object.keys(newErrors).length === 0\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!validateForm()) {\n      return\n    }\n\n    try {\n      // Filter out undefined values before submitting\n      const cleanObject = (obj: any): any => {\n        if (obj === null || obj === undefined) return undefined\n        if (typeof obj === 'object') {\n          const cleaned = Object.fromEntries(\n            Object.entries(obj).filter(([_, value]) => value !== undefined)\n          )\n          return Object.keys(cleaned).length > 0 ? cleaned : undefined\n        }\n        return obj\n      }\n\n      const cleanedData = cleanObject(formData) as ProjectFormData\n      await onSubmit(cleanedData)\n    } catch (error) {\n      console.error('Error submitting form:', error)\n    }\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\n      <div className=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\n        <div className=\"mt-3\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-medium text-gray-900\">\n              {isEditing ? 'Edit' : 'Create'}\n            </h3>\n            <button\n              onClick={onCancel}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"h-5 w-5\" />\n            </button>\n          </div>\n\n          {/* Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {/* Project Name */}\n            <div>\n              <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\n                Project Name *\n              </label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => handleChange('name', e.target.value)}\n                className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm ${\n                  errors.name ? 'border-red-300' : ''\n                }`}\n                placeholder=\"Enter project name\"\n              />\n              {errors.name && <p className=\"mt-1 text-sm text-red-600\">{errors.name}</p>}\n            </div>\n\n            {/* Client Name */}\n            <div>\n              <label htmlFor=\"clientName\" className=\"block text-sm font-medium text-gray-700\">\n                Client Name *\n              </label>\n              <input\n                type=\"text\"\n                id=\"clientName\"\n                value={formData.clientName}\n                onChange={(e) => handleChange('clientName', e.target.value)}\n                className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm ${\n                  errors.clientName ? 'border-red-300' : ''\n                }`}\n                placeholder=\"Enter client name\"\n              />\n              {errors.clientName && <p className=\"mt-1 text-sm text-red-600\">{errors.clientName}</p>}\n            </div>\n\n            {/* Description */}\n            <div>\n              <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700\">\n                Description\n              </label>\n              <textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => handleChange('description', e.target.value)}\n                rows={3}\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm\"\n                placeholder=\"Enter project description\"\n              />\n            </div>\n\n            {/* Budget */}\n            <div>\n              <label htmlFor=\"budget\" className=\"block text-sm font-medium text-gray-700\">\n                Budget (Optional)\n              </label>\n              <div className=\"mt-1 relative rounded-md shadow-sm\">\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                  <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                </div>\n                <input\n                  type=\"number\"\n                  id=\"budget\"\n                  value={formData.budget?.toString() || ''}\n                  onChange={(e) => {\n                    const inputValue = e.target.value.trim()\n                    if (inputValue === '') {\n                      handleChange('budget', 0) // This will be converted to undefined in handleChange\n                    } else {\n                      const numericValue = parseFloat(inputValue)\n                      handleChange('budget', isNaN(numericValue) ? 0 : numericValue)\n                    }\n                  }}\n                  className={`block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm ${\n                    errors.budget ? 'border-red-300' : ''\n                  }`}\n                  placeholder=\"0.00\"\n                  min=\"0\"\n                  step=\"0.01\"\n                />\n              </div>\n              {errors.budget && <p className=\"mt-1 text-sm text-red-600\">{errors.budget}</p>}\n            </div>\n\n            {/* Design Fee */}\n            <div>\n              <label htmlFor=\"designFee\" className=\"block text-sm font-medium text-gray-700\">\n                Design Fee (Optional)\n              </label>\n              <div className=\"mt-1 relative rounded-md shadow-sm\">\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                  <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                </div>\n                <input\n                  type=\"number\"\n                  id=\"designFee\"\n                  value={formData.designFee?.toString() || ''}\n                  onChange={(e) => {\n                    const inputValue = e.target.value.trim()\n                    if (inputValue === '') {\n                      handleChange('designFee', 0) // This will be converted to undefined in handleChange\n                    } else {\n                      const numericValue = parseFloat(inputValue)\n                      handleChange('designFee', isNaN(numericValue) ? 0 : numericValue)\n                    }\n                  }}\n                  className={`block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm ${\n                    errors.designFee ? 'border-red-300' : ''\n                  }`}\n                  placeholder=\"0.00\"\n                  min=\"0\"\n                  step=\"0.01\"\n                />\n              </div>\n              {errors.designFee && <p className=\"mt-1 text-sm text-red-600\">{errors.designFee}</p>}\n            </div>\n\n            {/* Budget Categories Section */}\n            <div className=\"border-t border-gray-200 pt-4\">\n              <h4 className=\"text-md font-medium text-gray-900 mb-3\">Budget Categories (Optional)</h4>\n              <p className=\"text-sm text-gray-500 mb-4\">Set specific budgets for different project categories. These will be used to track spending by category.</p>\n\n              {/* Furnishings */}\n              <div className=\"mb-4\">\n                <label htmlFor=\"budgetCategories.furnishings\" className=\"block text-sm font-medium text-gray-700\">\n                  Furnishings Budget\n                </label>\n                <div className=\"mt-1 relative rounded-md shadow-sm\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"budgetCategories.furnishings\"\n                    value={formData.budgetCategories?.furnishings?.toString() || ''}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      const newBudgetCategories: ProjectBudgetCategories = {\n                        designFee: formData.budgetCategories?.designFee || 0,\n                        furnishings: value > 0 ? value : 0,\n                        propertyManagement: formData.budgetCategories?.propertyManagement || 0,\n                        kitchen: formData.budgetCategories?.kitchen || 0,\n                        install: formData.budgetCategories?.install || 0,\n                        storageReceiving: formData.budgetCategories?.storageReceiving || 0,\n                        fuel: formData.budgetCategories?.fuel || 0\n                      }\n                      handleChange('budgetCategories', newBudgetCategories)\n                    }}\n                    className=\"block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm\"\n                    placeholder=\"0.00\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                </div>\n              </div>\n\n              {/* Property Management */}\n              <div className=\"mb-4\">\n                <label htmlFor=\"budgetCategories.propertyManagement\" className=\"block text-sm font-medium text-gray-700\">\n                  Property Management Budget\n                </label>\n                <div className=\"mt-1 relative rounded-md shadow-sm\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"budgetCategories.propertyManagement\"\n                    value={formData.budgetCategories?.propertyManagement?.toString() || ''}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      const newBudgetCategories: ProjectBudgetCategories = {\n                        designFee: 0,\n                        furnishings: 0,\n                        propertyManagement: 0,\n                        kitchen: 0,\n                        install: 0,\n                        storageReceiving: 0,\n                        fuel: 0,\n                        ...(formData.budgetCategories || {})\n                      }\n                      newBudgetCategories.propertyManagement = value > 0 ? value : 0\n                      handleChange('budgetCategories', newBudgetCategories)\n                    }}\n                    className=\"block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm\"\n                    placeholder=\"0.00\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                </div>\n              </div>\n\n              {/* Kitchen */}\n              <div className=\"mb-4\">\n                <label htmlFor=\"budgetCategories.kitchen\" className=\"block text-sm font-medium text-gray-700\">\n                  Kitchen Budget\n                </label>\n                <div className=\"mt-1 relative rounded-md shadow-sm\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"budgetCategories.kitchen\"\n                    value={formData.budgetCategories?.kitchen?.toString() || ''}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      const newBudgetCategories: ProjectBudgetCategories = {\n                        designFee: 0,\n                        furnishings: 0,\n                        propertyManagement: 0,\n                        kitchen: 0,\n                        install: 0,\n                        storageReceiving: 0,\n                        fuel: 0,\n                        ...(formData.budgetCategories || {})\n                      }\n                      newBudgetCategories.kitchen = value > 0 ? value : 0\n                      handleChange('budgetCategories', newBudgetCategories)\n                    }}\n                    className=\"block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm\"\n                    placeholder=\"0.00\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                </div>\n              </div>\n\n              {/* Install */}\n              <div className=\"mb-4\">\n                <label htmlFor=\"budgetCategories.install\" className=\"block text-sm font-medium text-gray-700\">\n                  Install Budget\n                </label>\n                <div className=\"mt-1 relative rounded-md shadow-sm\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"budgetCategories.install\"\n                    value={formData.budgetCategories?.install?.toString() || ''}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      const newBudgetCategories: ProjectBudgetCategories = {\n                        designFee: 0,\n                        furnishings: 0,\n                        propertyManagement: 0,\n                        kitchen: 0,\n                        install: 0,\n                        storageReceiving: 0,\n                        fuel: 0,\n                        ...(formData.budgetCategories || {})\n                      }\n                      newBudgetCategories.install = value > 0 ? value : 0\n                      handleChange('budgetCategories', newBudgetCategories)\n                    }}\n                    className=\"block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm\"\n                    placeholder=\"0.00\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                </div>\n              </div>\n\n              {/* Storage & Receiving */}\n              <div className=\"mb-4\">\n                <label htmlFor=\"budgetCategories.storageReceiving\" className=\"block text-sm font-medium text-gray-700\">\n                  Storage & Receiving Budget\n                </label>\n                <div className=\"mt-1 relative rounded-md shadow-sm\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"budgetCategories.storageReceiving\"\n                    value={formData.budgetCategories?.storageReceiving?.toString() || ''}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      const newBudgetCategories: ProjectBudgetCategories = {\n                        designFee: 0,\n                        furnishings: 0,\n                        propertyManagement: 0,\n                        kitchen: 0,\n                        install: 0,\n                        storageReceiving: 0,\n                        fuel: 0,\n                        ...(formData.budgetCategories || {})\n                      }\n                      newBudgetCategories.storageReceiving = value > 0 ? value : 0\n                      handleChange('budgetCategories', newBudgetCategories)\n                    }}\n                    className=\"block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm\"\n                    placeholder=\"0.00\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                </div>\n              </div>\n\n              {/* Fuel */}\n              <div className=\"mb-4\">\n                <label htmlFor=\"budgetCategories.fuel\" className=\"block text-sm font-medium text-gray-700\">\n                  Fuel Budget\n                </label>\n                <div className=\"mt-1 relative rounded-md shadow-sm\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"budgetCategories.fuel\"\n                    value={formData.budgetCategories?.fuel?.toString() || ''}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      const newBudgetCategories: ProjectBudgetCategories = {\n                        designFee: 0,\n                        furnishings: 0,\n                        propertyManagement: 0,\n                        kitchen: 0,\n                        install: 0,\n                        storageReceiving: 0,\n                        fuel: 0,\n                        ...(formData.budgetCategories || {})\n                      }\n                      newBudgetCategories.fuel = value > 0 ? value : 0\n                      handleChange('budgetCategories', newBudgetCategories)\n                    }}\n                    className=\"block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm\"\n                    placeholder=\"0.00\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Buttons */}\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <button\n                type=\"button\"\n                onClick={onCancel}\n                className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\"\n                disabled={isLoading}\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"px-4 py-2 text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50\"\n              >\n                {isLoading\n                  ? (isEditing ? 'Updating...' : 'Creating...')\n                  : (isEditing ? 'Update Project' : 'Create Project')\n                }\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport { Transaction, ProjectBudgetCategories, BudgetCategory } from '@/types'\nimport { ChevronDown, ChevronUp } from 'lucide-react'\n\ninterface BudgetProgressProps {\n  budget?: number\n  designFee?: number\n  budgetCategories?: ProjectBudgetCategories\n  transactions: Transaction[]\n  previewMode?: boolean // If true, only show primary budget (furnishings or overall) without toggle\n}\n\ninterface CategoryBudgetData {\n  category: BudgetCategory\n  budget: number\n  spent: number\n  percentage: number\n}\n\n\nexport default function BudgetProgress({ budget, designFee, budgetCategories, transactions, previewMode = false }: BudgetProgressProps) {\n  const [showAllCategories, setShowAllCategories] = useState(false)\n\n  // Calculate total spent for overall budget (exclude Design Fee transactions)\n  const calculateSpent = async (): Promise<number> => {\n    console.log('BudgetProgress - calculateSpent: Starting calculation for', transactions.length, 'transactions')\n\n    // Sum all transactions (purchases add, returns subtract), excluding canceled and design fee transactions\n    let totalAmount = 0\n\n    const activeTransactions = transactions.filter(t =>\n      (t.status || '').toLowerCase() !== 'canceled' &&\n      t.budget_category !== BudgetCategory.DESIGN_FEE\n    )\n\n    for (const transaction of activeTransactions) {\n      console.log('BudgetProgress - Processing transaction:', {\n        id: transaction.transaction_id,\n        type: transaction.transaction_type,\n        budget_category: transaction.budget_category,\n        amount: transaction.amount\n      })\n\n      const transactionAmount = parseFloat(transaction.amount || '0')\n      console.log('BudgetProgress - Transaction amount:', transactionAmount)\n\n      const multiplier = transaction.transaction_type === 'Return' ? -1 : 1\n      const finalAmount = transactionAmount * multiplier\n      totalAmount += finalAmount\n\n      console.log('BudgetProgress - Added', finalAmount, 'to total. Running total:', totalAmount)\n    }\n\n    console.log('BudgetProgress - Final total amount (excluding design fee):', totalAmount)\n    return totalAmount\n  }\n\n  // Calculate spending for each budget category\n  const calculateCategoryBudgetData = async (): Promise<CategoryBudgetData[]> => {\n    if (!budgetCategories) {\n      console.log('BudgetProgress - No budget categories provided')\n      return []\n    }\n\n    console.log('BudgetProgress - Available budget categories:', budgetCategories)\n    console.log('BudgetProgress - Total transactions available:', transactions.length)\n\n    const categoryData: CategoryBudgetData[] = []\n\n    // Define the categories to track in desired order\n    const categories = [\n      { key: 'furnishings' as keyof ProjectBudgetCategories, label: BudgetCategory.FURNISHINGS },\n      { key: 'install' as keyof ProjectBudgetCategories, label: BudgetCategory.INSTALL },\n      { key: 'fuel' as keyof ProjectBudgetCategories, label: BudgetCategory.FUEL },\n      { key: 'storageReceiving' as keyof ProjectBudgetCategories, label: BudgetCategory.STORAGE_RECEIVING },\n      { key: 'kitchen' as keyof ProjectBudgetCategories, label: BudgetCategory.KITCHEN },\n      { key: 'propertyManagement' as keyof ProjectBudgetCategories, label: BudgetCategory.PROPERTY_MANAGEMENT },\n      { key: 'designFee' as keyof ProjectBudgetCategories, label: BudgetCategory.DESIGN_FEE },\n    ]\n\n    for (const { key, label } of categories) {\n      const categoryBudget = budgetCategories[key] || 0\n      // Show design fee progress bar even if no transactions yet\n      const shouldShowCategory = label === BudgetCategory.DESIGN_FEE ?\n        (designFee !== null && designFee !== undefined && designFee > 0) :\n        categoryBudget > 0\n\n      if (shouldShowCategory) {\n        // Special handling for Design Fee - track received vs remaining to receive\n        if (label === BudgetCategory.DESIGN_FEE) {\n          const designFeeReceived = transactions\n            .filter(transaction =>\n              transaction.budget_category === BudgetCategory.DESIGN_FEE\n            )\n            .reduce((total, transaction) => {\n              const amount = parseFloat(transaction.amount || '0')\n              // Apply transaction type multiplier: purchases add, returns subtract\n              const multiplier = transaction.transaction_type === 'Return' ? -1 : 1\n              return total + (amount * multiplier)\n            }, 0)\n\n          const percentage = designFee && designFee > 0 ? (designFeeReceived / designFee) * 100 : 0\n\n          categoryData.push({\n            category: label,\n            budget: designFee || 0, // Use designFee instead of budgetCategories[key]\n            spent: Math.round(designFeeReceived), // For design fee, \"spent\" represents \"received\"\n            percentage: Math.min(percentage, 100) // Cap at 100%\n          })\n        } else {\n          // Regular categories - track spent vs budget based on transaction amounts directly\n          let categorySpent = 0\n\n          const categoryTransactions = transactions.filter(transaction =>\n            (transaction.status || '').toLowerCase() !== 'canceled' &&\n            transaction.budget_category === label\n          )\n\n          console.log(`BudgetProgress - Category ${label}: Found ${categoryTransactions.length} transactions`)\n\n          for (const transaction of categoryTransactions) {\n            console.log(`BudgetProgress - Category ${label} - Processing transaction:`, {\n              id: transaction.transaction_id,\n              type: transaction.transaction_type,\n              budget_category: transaction.budget_category,\n              amount: transaction.amount\n            })\n\n            // Use transaction amount directly for budget calculation\n            const transactionAmount = parseFloat(transaction.amount || '0')\n            console.log(`BudgetProgress - Category ${label} - Transaction amount:`, transactionAmount)\n\n            // Apply transaction type multiplier: purchases add, returns subtract\n            const multiplier = transaction.transaction_type === 'Return' ? -1 : 1\n            const finalAmount = transactionAmount * multiplier\n            categorySpent += finalAmount\n\n            console.log(`BudgetProgress - Category ${label} - Added ${finalAmount} to category total. Running total:`, categorySpent)\n          }\n\n          const percentage = categoryBudget > 0 ? (categorySpent / categoryBudget) * 100 : 0\n\n          categoryData.push({\n            category: label,\n            budget: categoryBudget,\n            spent: Math.round(categorySpent),\n            percentage: Math.min(percentage, 100) // Cap at 100%\n          })\n        }\n      }\n    }\n\n    return categoryData\n  }\n\n  const [spent, setSpent] = useState(0)\n  const [percentage, setPercentage] = useState(0)\n  const [allCategoryData, setAllCategoryData] = useState<CategoryBudgetData[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [computedOverallBudget, setComputedOverallBudget] = useState<number>(budget || 0)\n\n  // Calculate budget data when component mounts or when props change\n  useEffect(() => {\n    const calculateBudgetData = async () => {\n      console.log('BudgetProgress - useEffect triggered with:', {\n        budget,\n        designFee,\n        budgetCategories,\n        transactionCount: transactions.length\n      })\n\n      setIsLoading(true)\n\n      try {\n        const spentAmount = await calculateSpent()\n        const categoryData = await calculateCategoryBudgetData()\n\n        // Compute overall budget as the sum of category budgets (exclude designFee key)\n        const overallFromCategories = budgetCategories ? Object.entries(budgetCategories).reduce((sum, [key, val]) => {\n          if (key === 'designFee') return sum\n          return sum + (val as number || 0)\n        }, 0) : 0\n\n        const spentRounded = Math.round(spentAmount)\n        const percentageValue = overallFromCategories > 0 ? (spentRounded / overallFromCategories) * 100 : 0\n\n        console.log('BudgetProgress - Final results:', {\n          spentAmount,\n          spentRounded,\n          percentageValue,\n          overallFromCategories,\n          categoryDataLength: categoryData.length\n        })\n\n        setSpent(spentRounded)\n        setPercentage(percentageValue)\n        setAllCategoryData(categoryData)\n        setComputedOverallBudget(overallFromCategories)\n      } catch (error) {\n        console.error('Error calculating budget data:', error)\n        setSpent(0)\n        setPercentage(0)\n        setAllCategoryData([])\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    calculateBudgetData()\n  }, [budget, designFee, budgetCategories, transactions])\n\n  // In preview mode, determine what to show: furnishings budget if it exists, otherwise overall furnishings-only budget\n  let categoryData = allCategoryData\n  let overallBudgetCategory = null\n\n  if (previewMode) {\n    // In preview mode, show only the primary budget (furnishings if set, otherwise overall furnishings-only budget)\n    const furnishingsCategory = allCategoryData.find(cat => cat.category === BudgetCategory.FURNISHINGS)\n    if (furnishingsCategory) {\n      // Show only furnishings budget category\n      categoryData = [furnishingsCategory]\n    } else if (computedOverallBudget > 0) {\n      // No category budgets set, show overall budget (sum of categories, excluding design fee)\n      overallBudgetCategory = {\n        category: 'Overall Budget' as BudgetCategory,\n        budget: computedOverallBudget,\n        spent: spent,\n        percentage: percentage\n      }\n    }\n  } else {\n    // Full mode: Filter categories based on toggle state - show only furnishings by default, others when expanded\n    categoryData = allCategoryData.filter(category =>\n      category.category === BudgetCategory.FURNISHINGS || showAllCategories\n    )\n\n    // Add overall budget as a category if it exists and should be shown\n    // Show overall budget only when the toggle is expanded (showAllCategories === true)\n    const shouldShowOverallBudget = computedOverallBudget > 0 && showAllCategories\n\n    overallBudgetCategory = shouldShowOverallBudget ? {\n      category: 'Overall Budget' as BudgetCategory,\n      budget: computedOverallBudget,\n      spent: spent,\n      percentage: percentage\n    } : null\n  }\n\n  // Build the final render list and append overall budget at the very bottom (below Design Fee)\n  const renderCategories: CategoryBudgetData[] = (() => {\n    const cats: CategoryBudgetData[] = [...(categoryData || [])]\n    if (overallBudgetCategory) {\n      // Always append overall budget at the end of the list\n      cats.push(overallBudgetCategory)\n    }\n    return cats\n  })()\n\n\n  const getProgressColor = (percentage: number) => {\n    if (percentage >= 100) return 'bg-red-500'\n    if (percentage >= 75) return 'bg-red-500' // 75%+ spent = bad (red)\n    if (percentage >= 50) return 'bg-yellow-500' // 50-74% spent = warning (yellow)\n    return 'bg-green-500' // Less than 50% spent = good (green)\n  }\n\n  // Color logic for remaining amounts (green when plenty left, yellow when warning, red when over)\n  const getRemainingColor = (percentage: number) => {\n    if (percentage >= 100) return 'text-red-600' // Over budget = red\n    if (percentage >= 75) return 'text-red-600' // 75%+ spent = bad (red)\n    if (percentage >= 50) return 'text-yellow-600' // 50-74% spent = warning (yellow)\n    return 'text-green-600' // Less than 50% spent = good (green)\n  }\n\n  // Reversed color logic for design fee (green when received, red when not received)\n  const getDesignFeeProgressColor = (percentage: number) => {\n    if (percentage >= 100) return 'bg-green-500' // Fully received = good (green)\n    if (percentage >= 75) return 'bg-green-500' // 75%+ received = good (green)\n    if (percentage >= 50) return 'bg-yellow-500' // 50%+ received = warning (yellow)\n    return 'bg-red-500' // Less than 50% received = bad (red)\n  }\n\n  // Reversed color logic for design fee remaining amounts\n  const getDesignFeeRemainingColor = (percentage: number) => {\n    if (percentage >= 100) return 'text-green-600' // Fully received = good (green)\n    if (percentage >= 75) return 'text-green-600' // 75%+ received = good (green)\n    if (percentage >= 50) return 'text-yellow-600' // 50%+ received = warning (yellow)\n    return 'text-red-600' // Less than 50% received = bad (red)\n  }\n\n  // Format category names to include \"Budget\" suffix\n  const formatCategoryName = (categoryName: string | BudgetCategory) => {\n    // Don't add \"Budget\" to Design Fee or Overall Budget as they're already clear\n    if (categoryName === BudgetCategory.DESIGN_FEE || categoryName === 'Overall Budget') {\n      return categoryName\n    }\n    return `${categoryName} Budget`\n  }\n\n  // If no budget or categories are set, don't show anything\n  const hasOverallBudget = computedOverallBudget > 0\n  const hasDesignFee = designFee !== null && designFee !== undefined && designFee > 0\n  const hasCategoryBudgets = budgetCategories && Object.values(budgetCategories).some(v => v > 0)\n\n  // Show loading state while calculating\n  if (isLoading) {\n    return (\n      <div>\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n          <div className=\"h-2 bg-gray-200 rounded mb-4\"></div>\n        </div>\n      </div>\n    )\n  }\n\n  if (!hasOverallBudget && !hasDesignFee && !hasCategoryBudgets) {\n    return null\n  }\n\n  // In preview mode, use same format as full mode but without toggle and only showing primary budget\n  if (previewMode) {\n    return (\n      <div>\n        {/* Category Budget Progress */}\n        {(categoryData.length > 0 || overallBudgetCategory) && (\n          <div>\n\n            <div className=\"space-y-4\">\n              {[...categoryData, ...(overallBudgetCategory ? [overallBudgetCategory] : [])].map((category) => {\n                const isDesignFee = category.category === BudgetCategory.DESIGN_FEE\n                return (\n                  <div key={category.category}>\n                    <div className=\"mb-2\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <span className=\"text-base font-medium text-gray-900\">{formatCategoryName(category.category)}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-500\">\n                          ${Math.round(category.spent).toLocaleString('en-US')} {isDesignFee ? 'received' : 'spent'}\n                        </span>\n                        <span className={`text-sm ${isDesignFee ? getDesignFeeRemainingColor(category.percentage) : getRemainingColor(category.percentage)}`}>\n                          <span className=\"font-bold\">${Math.round((category.budget || 0) - category.spent).toLocaleString('en-US')}</span> remaining\n                        </span>\n                      </div>\n                    </div>\n\n                    {/* Progress Bar */}\n                    <div className=\"relative\">\n                      <div className=\"w-full bg-gray-200 rounded-full h-2 mb-1\">\n                        <div\n                          className={`h-2 rounded-full transition-all duration-300 ${\n                            isDesignFee ? getDesignFeeProgressColor(category.percentage) : getProgressColor(category.percentage)\n                          }`}\n                          style={{ width: `${Math.min(category.percentage, 100)}%` }}\n                        />\n                      </div>\n\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n\n          </div>\n        )}\n\n        {/* Show message if no budgets are configured */}\n        {!budget && !designFee && (!budgetCategories || Object.values(budgetCategories).every(v => v === 0)) && (\n          <div className=\"text-center py-4 text-gray-500\">\n            <p>No budgets configured for this project.</p>\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  // Full mode with toggle functionality\n  return (\n    <div>\n      {/* Category Budget Progress */}\n      {(categoryData.length > 0 || overallBudgetCategory) && (\n        <div>\n\n          <div className=\"space-y-4\">\n            {renderCategories.map((category) => {\n              const isDesignFee = category.category === BudgetCategory.DESIGN_FEE\n              return (\n                <div key={category.category}>\n                  <div className=\"mb-2\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"text-base font-medium text-gray-900\">{formatCategoryName(category.category)}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-500\">\n                        ${Math.round(category.spent).toLocaleString('en-US')} {isDesignFee ? 'received' : 'spent'}\n                      </span>\n                      <span className={`text-sm ${isDesignFee ? getDesignFeeRemainingColor(category.percentage) : getRemainingColor(category.percentage)}`}>\n                        <span className=\"font-bold\">${Math.round((category.budget || 0) - category.spent).toLocaleString('en-US')}</span> remaining\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Progress Bar */}\n                  <div className=\"relative\">\n                    <div className=\"w-full bg-gray-200 rounded-full h-2 mb-1\">\n                      <div\n                        className={`h-2 rounded-full transition-all duration-300 ${\n                          isDesignFee ? getDesignFeeProgressColor(category.percentage) : getProgressColor(category.percentage)\n                        }`}\n                        style={{ width: `${Math.min(category.percentage, 100)}%` }}\n                      />\n                    </div>\n\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n\n          {/* Show All Categories Toggle - positioned at bottom */}\n          {(allCategoryData.some(cat => cat.category !== BudgetCategory.FURNISHINGS && cat.category !== BudgetCategory.DESIGN_FEE) || (budget !== null && budget !== undefined && budget > 0)) && (\n            <div className=\"mt-4\">\n              <button\n                onClick={() => setShowAllCategories(!showAllCategories)}\n                className=\"inline-flex items-center text-sm font-medium text-primary-600 hover:text-primary-800 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\"\n              >\n                {showAllCategories ? (\n                  <>\n                    <ChevronUp className=\"h-4 w-4 mr-1\" />\n                    Show Less\n                  </>\n                ) : (\n                  <>\n                    <ChevronDown className=\"h-4 w-4 mr-1\" />\n                    Show All Budget Categories\n                  </>\n                )}\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Show message if no budgets are configured */}\n      {!budget && !designFee && (!budgetCategories || Object.values(budgetCategories).every(v => v === 0)) && (\n        <div className=\"text-center py-4 text-gray-500\">\n          <p>No budgets configured for this project.</p>\n        </div>\n      )}\n    </div>\n  )\n}\n\n"],"names":["ProjectForm","onSubmit","onCancel","isLoading","initialData","isEditing","formData","setFormData","useState","errors","setErrors","handleChange","field","value","prev","processedValue","validateForm","newErrors","handleSubmit","e","cleanedData","obj","cleaned","_","error","jsx","jsxs","DollarSign","_a","inputValue","numericValue","_b","_d","_c","newBudgetCategories","_e","_f","_h","_g","_j","_i","_l","_k","_n","_m","BudgetProgress","budget","designFee","budgetCategories","transactions","previewMode","showAllCategories","setShowAllCategories","calculateSpent","totalAmount","activeTransactions","t","BudgetCategory","transaction","transactionAmount","multiplier","finalAmount","calculateCategoryBudgetData","categoryData","categories","key","label","categoryBudget","designFeeReceived","total","amount","percentage","categorySpent","categoryTransactions","spent","setSpent","setPercentage","allCategoryData","setAllCategoryData","setIsLoading","computedOverallBudget","setComputedOverallBudget","useEffect","spentAmount","overallFromCategories","sum","val","spentRounded","percentageValue","overallBudgetCategory","furnishingsCategory","cat","category","renderCategories","cats","getProgressColor","getRemainingColor","getDesignFeeProgressColor","getDesignFeeRemainingColor","formatCategoryName","categoryName","hasOverallBudget","hasDesignFee","hasCategoryBudgets","v","isDesignFee","Fragment","ChevronUp","ChevronDown"],"mappings":"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"}