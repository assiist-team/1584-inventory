{"version":3,"file":"BudgetProgress.js","sources":["../../src/components/ProjectForm.tsx","../../src/components/ui/BudgetProgress.tsx"],"sourcesContent":["import { useState } from 'react'\nimport { X, DollarSign } from 'lucide-react'\nimport { ProjectBudgetCategories } from '@/types'\n\ninterface ProjectFormData {\n  name: string;\n  description: string;\n  clientName: string;\n  budget?: number;\n  designFee?: number;\n  budgetCategories?: ProjectBudgetCategories;\n}\n\ninterface ProjectFormProps {\n  onSubmit: (data: ProjectFormData) => Promise<void>;\n  onCancel: () => void;\n  isLoading?: boolean;\n  initialData?: Partial<ProjectFormData>;\n}\n\nexport default function ProjectForm({ onSubmit, onCancel, isLoading = false, initialData }: ProjectFormProps) {\n  const isEditing = Boolean(initialData?.name)\n\n  const [formData, setFormData] = useState<ProjectFormData>({\n    name: initialData?.name || '',\n    description: initialData?.description || '',\n    clientName: initialData?.clientName || '',\n    budget: initialData?.budget || undefined,\n    designFee: initialData?.designFee || undefined,\n    budgetCategories: initialData?.budgetCategories || undefined,\n  })\n\n  const [errors, setErrors] = useState<Record<string, string>>({})\n\n  const handleChange = (field: keyof ProjectFormData, value: string | number | ProjectBudgetCategories) => {\n    if (field === 'budgetCategories' && typeof value === 'object') {\n      setFormData(prev => ({ ...prev, [field]: value }))\n    } else {\n      const processedValue = typeof value === 'number' && value === 0 ? undefined : value\n      setFormData(prev => ({ ...prev, [field]: processedValue }))\n    }\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }))\n    }\n  }\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {}\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Project name is required'\n    }\n\n    if (!formData.clientName.trim()) {\n      newErrors.clientName = 'Client name is required'\n    }\n\n    // Budget and design fee are optional, but if provided, should be valid numbers\n    if (formData.budget !== undefined && (isNaN(formData.budget) || formData.budget < 0)) {\n      newErrors.budget = 'Budget must be a positive number'\n    }\n\n    if (formData.designFee !== undefined && (isNaN(formData.designFee) || formData.designFee < 0)) {\n      newErrors.designFee = 'Design fee must be a positive number'\n    }\n\n    setErrors(newErrors)\n    return Object.keys(newErrors).length === 0\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!validateForm()) {\n      return\n    }\n\n    try {\n      await onSubmit(formData)\n    } catch (error) {\n      console.error('Error submitting form:', error)\n    }\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\n      <div className=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\n        <div className=\"mt-3\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-medium text-gray-900\">\n              {isEditing ? 'Edit' : 'Create'}\n            </h3>\n            <button\n              onClick={onCancel}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"h-5 w-5\" />\n            </button>\n          </div>\n\n          {/* Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {/* Project Name */}\n            <div>\n              <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\n                Project Name *\n              </label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => handleChange('name', e.target.value)}\n                className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm ${\n                  errors.name ? 'border-red-300' : ''\n                }`}\n                placeholder=\"Enter project name\"\n              />\n              {errors.name && <p className=\"mt-1 text-sm text-red-600\">{errors.name}</p>}\n            </div>\n\n            {/* Client Name */}\n            <div>\n              <label htmlFor=\"clientName\" className=\"block text-sm font-medium text-gray-700\">\n                Client Name *\n              </label>\n              <input\n                type=\"text\"\n                id=\"clientName\"\n                value={formData.clientName}\n                onChange={(e) => handleChange('clientName', e.target.value)}\n                className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm ${\n                  errors.clientName ? 'border-red-300' : ''\n                }`}\n                placeholder=\"Enter client name\"\n              />\n              {errors.clientName && <p className=\"mt-1 text-sm text-red-600\">{errors.clientName}</p>}\n            </div>\n\n            {/* Description */}\n            <div>\n              <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700\">\n                Description\n              </label>\n              <textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => handleChange('description', e.target.value)}\n                rows={3}\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm\"\n                placeholder=\"Enter project description\"\n              />\n            </div>\n\n            {/* Budget */}\n            <div>\n              <label htmlFor=\"budget\" className=\"block text-sm font-medium text-gray-700\">\n                Budget (Optional)\n              </label>\n              <div className=\"mt-1 relative rounded-md shadow-sm\">\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                  <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                </div>\n                <input\n                  type=\"number\"\n                  id=\"budget\"\n                  value={formData.budget?.toString() || ''}\n                  onChange={(e) => handleChange('budget', parseFloat(e.target.value) || 0)}\n                  className={`block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm ${\n                    errors.budget ? 'border-red-300' : ''\n                  }`}\n                  placeholder=\"0.00\"\n                  min=\"0\"\n                  step=\"0.01\"\n                />\n              </div>\n              {errors.budget && <p className=\"mt-1 text-sm text-red-600\">{errors.budget}</p>}\n            </div>\n\n            {/* Design Fee */}\n            <div>\n              <label htmlFor=\"designFee\" className=\"block text-sm font-medium text-gray-700\">\n                Design Fee (Optional)\n              </label>\n              <div className=\"mt-1 relative rounded-md shadow-sm\">\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                  <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                </div>\n                <input\n                  type=\"number\"\n                  id=\"designFee\"\n                  value={formData.designFee?.toString() || ''}\n                  onChange={(e) => handleChange('designFee', parseFloat(e.target.value) || 0)}\n                  className={`block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm ${\n                    errors.designFee ? 'border-red-300' : ''\n                  }`}\n                  placeholder=\"0.00\"\n                  min=\"0\"\n                  step=\"0.01\"\n                />\n              </div>\n              {errors.designFee && <p className=\"mt-1 text-sm text-red-600\">{errors.designFee}</p>}\n            </div>\n\n            {/* Budget Categories Section */}\n            <div className=\"border-t border-gray-200 pt-4\">\n              <h4 className=\"text-md font-medium text-gray-900 mb-3\">Budget Categories (Optional)</h4>\n              <p className=\"text-sm text-gray-500 mb-4\">Set specific budgets for different project categories. These will be used to track spending by category.</p>\n\n              {/* Furnishings */}\n              <div className=\"mb-4\">\n                <label htmlFor=\"budgetCategories.furnishings\" className=\"block text-sm font-medium text-gray-700\">\n                  Furnishings Budget\n                </label>\n                <div className=\"mt-1 relative rounded-md shadow-sm\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"budgetCategories.furnishings\"\n                    value={formData.budgetCategories?.furnishings?.toString() || ''}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      const newBudgetCategories: ProjectBudgetCategories = {\n                        designFee: formData.budgetCategories?.designFee || 0,\n                        furnishings: value > 0 ? value : 0,\n                        propertyManagement: formData.budgetCategories?.propertyManagement || 0,\n                        kitchen: formData.budgetCategories?.kitchen || 0,\n                        install: formData.budgetCategories?.install || 0,\n                        storageReceiving: formData.budgetCategories?.storageReceiving || 0,\n                        fuel: formData.budgetCategories?.fuel || 0\n                      }\n                      handleChange('budgetCategories', newBudgetCategories)\n                    }}\n                    className=\"block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm\"\n                    placeholder=\"0.00\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                </div>\n              </div>\n\n              {/* Property Management */}\n              <div className=\"mb-4\">\n                <label htmlFor=\"budgetCategories.propertyManagement\" className=\"block text-sm font-medium text-gray-700\">\n                  Property Management Budget\n                </label>\n                <div className=\"mt-1 relative rounded-md shadow-sm\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"budgetCategories.propertyManagement\"\n                    value={formData.budgetCategories?.propertyManagement?.toString() || ''}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      const newBudgetCategories: ProjectBudgetCategories = {\n                        designFee: 0,\n                        furnishings: 0,\n                        propertyManagement: 0,\n                        kitchen: 0,\n                        install: 0,\n                        storageReceiving: 0,\n                        fuel: 0,\n                        ...(formData.budgetCategories || {})\n                      }\n                      newBudgetCategories.propertyManagement = value > 0 ? value : 0\n                      handleChange('budgetCategories', newBudgetCategories)\n                    }}\n                    className=\"block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm\"\n                    placeholder=\"0.00\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                </div>\n              </div>\n\n              {/* Kitchen */}\n              <div className=\"mb-4\">\n                <label htmlFor=\"budgetCategories.kitchen\" className=\"block text-sm font-medium text-gray-700\">\n                  Kitchen Budget\n                </label>\n                <div className=\"mt-1 relative rounded-md shadow-sm\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"budgetCategories.kitchen\"\n                    value={formData.budgetCategories?.kitchen?.toString() || ''}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      const newBudgetCategories: ProjectBudgetCategories = {\n                        designFee: 0,\n                        furnishings: 0,\n                        propertyManagement: 0,\n                        kitchen: 0,\n                        install: 0,\n                        storageReceiving: 0,\n                        fuel: 0,\n                        ...(formData.budgetCategories || {})\n                      }\n                      newBudgetCategories.kitchen = value > 0 ? value : 0\n                      handleChange('budgetCategories', newBudgetCategories)\n                    }}\n                    className=\"block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm\"\n                    placeholder=\"0.00\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                </div>\n              </div>\n\n              {/* Install */}\n              <div className=\"mb-4\">\n                <label htmlFor=\"budgetCategories.install\" className=\"block text-sm font-medium text-gray-700\">\n                  Install Budget\n                </label>\n                <div className=\"mt-1 relative rounded-md shadow-sm\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"budgetCategories.install\"\n                    value={formData.budgetCategories?.install?.toString() || ''}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      const newBudgetCategories: ProjectBudgetCategories = {\n                        designFee: 0,\n                        furnishings: 0,\n                        propertyManagement: 0,\n                        kitchen: 0,\n                        install: 0,\n                        storageReceiving: 0,\n                        fuel: 0,\n                        ...(formData.budgetCategories || {})\n                      }\n                      newBudgetCategories.install = value > 0 ? value : 0\n                      handleChange('budgetCategories', newBudgetCategories)\n                    }}\n                    className=\"block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm\"\n                    placeholder=\"0.00\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                </div>\n              </div>\n\n              {/* Storage & Receiving */}\n              <div className=\"mb-4\">\n                <label htmlFor=\"budgetCategories.storageReceiving\" className=\"block text-sm font-medium text-gray-700\">\n                  Storage & Receiving Budget\n                </label>\n                <div className=\"mt-1 relative rounded-md shadow-sm\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"budgetCategories.storageReceiving\"\n                    value={formData.budgetCategories?.storageReceiving?.toString() || ''}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      const newBudgetCategories: ProjectBudgetCategories = {\n                        designFee: 0,\n                        furnishings: 0,\n                        propertyManagement: 0,\n                        kitchen: 0,\n                        install: 0,\n                        storageReceiving: 0,\n                        fuel: 0,\n                        ...(formData.budgetCategories || {})\n                      }\n                      newBudgetCategories.storageReceiving = value > 0 ? value : 0\n                      handleChange('budgetCategories', newBudgetCategories)\n                    }}\n                    className=\"block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm\"\n                    placeholder=\"0.00\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                </div>\n              </div>\n\n              {/* Fuel */}\n              <div className=\"mb-4\">\n                <label htmlFor=\"budgetCategories.fuel\" className=\"block text-sm font-medium text-gray-700\">\n                  Fuel Budget\n                </label>\n                <div className=\"mt-1 relative rounded-md shadow-sm\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-400\" />\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"budgetCategories.fuel\"\n                    value={formData.budgetCategories?.fuel?.toString() || ''}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      const newBudgetCategories: ProjectBudgetCategories = {\n                        designFee: 0,\n                        furnishings: 0,\n                        propertyManagement: 0,\n                        kitchen: 0,\n                        install: 0,\n                        storageReceiving: 0,\n                        fuel: 0,\n                        ...(formData.budgetCategories || {})\n                      }\n                      newBudgetCategories.fuel = value > 0 ? value : 0\n                      handleChange('budgetCategories', newBudgetCategories)\n                    }}\n                    className=\"block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm\"\n                    placeholder=\"0.00\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Buttons */}\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <button\n                type=\"button\"\n                onClick={onCancel}\n                className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\"\n                disabled={isLoading}\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"px-4 py-2 text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50\"\n              >\n                {isLoading\n                  ? (isEditing ? 'Updating...' : 'Creating...')\n                  : (isEditing ? 'Update Project' : 'Create Project')\n                }\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { useState } from 'react'\nimport { Transaction, ProjectBudgetCategories, BudgetCategory } from '@/types'\nimport { ChevronDown, ChevronUp } from 'lucide-react'\n\ninterface BudgetProgressProps {\n  budget?: number\n  designFee?: number\n  budgetCategories?: ProjectBudgetCategories\n  transactions: Transaction[]\n  previewMode?: boolean // If true, only show primary budget (furnishings or overall) without toggle\n}\n\ninterface CategoryBudgetData {\n  category: BudgetCategory\n  budget: number\n  spent: number\n  percentage: number\n}\n\n\nexport default function BudgetProgress({ budget, designFee, budgetCategories, transactions, previewMode = false }: BudgetProgressProps) {\n  const [showAllCategories, setShowAllCategories] = useState(false)\n\n  // Calculate total spent (purchases + design fee, excluding returns)\n  const calculateSpent = (): number => {\n    if (!budget && budget !== 0) return 0\n\n    // Sum all purchases (exclude returns)\n    const purchases = transactions\n      .filter(transaction => transaction.transaction_type === 'Purchase')\n      .reduce((total, transaction) => total + parseFloat(transaction.amount || '0'), 0)\n\n    // Add design fee if it exists\n    const totalDesignFee = designFee || 0\n\n    return purchases + totalDesignFee\n  }\n\n  // Calculate spending for each budget category\n  const calculateCategoryBudgetData = (): CategoryBudgetData[] => {\n    if (!budgetCategories) return []\n\n    const categoryData: CategoryBudgetData[] = []\n\n    // Define the categories to track in desired order\n    const categories = [\n      { key: 'furnishings' as keyof ProjectBudgetCategories, label: BudgetCategory.FURNISHINGS },\n      { key: 'install' as keyof ProjectBudgetCategories, label: BudgetCategory.INSTALL },\n      { key: 'fuel' as keyof ProjectBudgetCategories, label: BudgetCategory.FUEL },\n      { key: 'storageReceiving' as keyof ProjectBudgetCategories, label: BudgetCategory.STORAGE_RECEIVING },\n      { key: 'kitchen' as keyof ProjectBudgetCategories, label: BudgetCategory.KITCHEN },\n      { key: 'propertyManagement' as keyof ProjectBudgetCategories, label: BudgetCategory.PROPERTY_MANAGEMENT },\n      { key: 'designFee' as keyof ProjectBudgetCategories, label: BudgetCategory.DESIGN_FEE },\n    ]\n\n    categories.forEach(({ key, label }) => {\n      const categoryBudget = budgetCategories[key] || 0\n      // Show design fee progress bar even if no transactions yet\n      const shouldShowCategory = label === BudgetCategory.DESIGN_FEE ?\n        (designFee !== null && designFee !== undefined && designFee > 0) :\n        categoryBudget > 0\n\n      if (shouldShowCategory) {\n        // Special handling for Design Fee - track received vs remaining to receive\n        if (label === BudgetCategory.DESIGN_FEE) {\n          const designFeeReceived = transactions\n            .filter(transaction =>\n              transaction.transaction_type === 'Purchase' &&\n              transaction.budget_category === BudgetCategory.DESIGN_FEE\n            )\n            .reduce((total, transaction) => total + parseFloat(transaction.amount || '0'), 0)\n\n          const percentage = designFee && designFee > 0 ? (designFeeReceived / designFee) * 100 : 0\n\n          categoryData.push({\n            category: label,\n            budget: designFee || 0, // Use designFee instead of budgetCategories[key]\n            spent: Math.round(designFeeReceived), // For design fee, \"spent\" represents \"received\"\n            percentage: Math.min(percentage, 100) // Cap at 100%\n          })\n        } else {\n          // Regular categories - track spent vs budget\n          const categorySpent = transactions\n            .filter(transaction =>\n              transaction.transaction_type === 'Purchase' &&\n              transaction.budget_category === label\n            )\n            .reduce((total, transaction) => total + parseFloat(transaction.amount || '0'), 0)\n\n          const percentage = categoryBudget > 0 ? (categorySpent / categoryBudget) * 100 : 0\n\n          categoryData.push({\n            category: label,\n            budget: categoryBudget,\n            spent: Math.round(categorySpent),\n            percentage: Math.min(percentage, 100) // Cap at 100%\n          })\n        }\n      }\n    })\n\n    return categoryData\n  }\n\n  const spent = Math.round(calculateSpent())\n  const percentage = budget && budget > 0 ? (spent / budget) * 100 : 0\n  const allCategoryData = calculateCategoryBudgetData()\n\n  // In preview mode, determine what to show: furnishings budget if it exists, otherwise overall budget\n  let categoryData = allCategoryData\n  let overallBudgetCategory = null\n\n  if (previewMode) {\n    // In preview mode, show only the primary budget (furnishings if set, otherwise overall)\n    const furnishingsCategory = allCategoryData.find(cat => cat.category === BudgetCategory.FURNISHINGS)\n    if (furnishingsCategory) {\n      // Show only furnishings budget\n      categoryData = [furnishingsCategory]\n    } else if (budget !== null && budget !== undefined && budget > 0) {\n      // No category budgets, show overall budget\n      overallBudgetCategory = {\n        category: 'Overall Budget' as BudgetCategory,\n        budget: budget,\n        spent: spent,\n        percentage: percentage\n      }\n    }\n  } else {\n    // Full mode: Filter categories based on toggle state - show only furnishings by default, others when expanded\n    categoryData = allCategoryData.filter(category =>\n      category.category === BudgetCategory.FURNISHINGS || showAllCategories\n    )\n\n    // Add overall budget as a category if it exists and should be shown\n    // Show overall budget if: there's a budget > 0 AND (no primary categories exist OR showAllCategories is true)\n    const hasPrimaryCategories = allCategoryData.some(cat => cat.category === BudgetCategory.FURNISHINGS)\n    const shouldShowOverallBudget = budget !== null && budget !== undefined && budget > 0 && (!hasPrimaryCategories || showAllCategories)\n    overallBudgetCategory = shouldShowOverallBudget ? {\n      category: 'Overall Budget' as BudgetCategory,\n      budget: budget,\n      spent: spent,\n      percentage: percentage\n    } : null\n  }\n\n\n  const getProgressColor = (percentage: number) => {\n    if (percentage >= 100) return 'bg-red-500'\n    if (percentage >= 75) return 'bg-red-500' // 75%+ spent = bad (red)\n    if (percentage >= 50) return 'bg-yellow-500' // 50-74% spent = warning (yellow)\n    return 'bg-green-500' // Less than 50% spent = good (green)\n  }\n\n  // Color logic for remaining amounts (green when plenty left, yellow when warning, red when over)\n  const getRemainingColor = (percentage: number) => {\n    if (percentage >= 100) return 'text-red-600' // Over budget = red\n    if (percentage >= 75) return 'text-red-600' // 75%+ spent = bad (red)\n    if (percentage >= 50) return 'text-yellow-600' // 50-74% spent = warning (yellow)\n    return 'text-green-600' // Less than 50% spent = good (green)\n  }\n\n  // Reversed color logic for design fee (green when received, red when not received)\n  const getDesignFeeProgressColor = (percentage: number) => {\n    if (percentage >= 100) return 'bg-green-500' // Fully received = good (green)\n    if (percentage >= 75) return 'bg-green-500' // 75%+ received = good (green)\n    if (percentage >= 50) return 'bg-yellow-500' // 50%+ received = warning (yellow)\n    return 'bg-red-500' // Less than 50% received = bad (red)\n  }\n\n  // Reversed color logic for design fee remaining amounts\n  const getDesignFeeRemainingColor = (percentage: number) => {\n    if (percentage >= 100) return 'text-green-600' // Fully received = good (green)\n    if (percentage >= 75) return 'text-green-600' // 75%+ received = good (green)\n    if (percentage >= 50) return 'text-yellow-600' // 50%+ received = warning (yellow)\n    return 'text-red-600' // Less than 50% received = bad (red)\n  }\n\n  // Format category names to include \"Budget\" suffix\n  const formatCategoryName = (categoryName: string | BudgetCategory) => {\n    // Don't add \"Budget\" to Design Fee or Overall Budget as they're already clear\n    if (categoryName === BudgetCategory.DESIGN_FEE || categoryName === 'Overall Budget') {\n      return categoryName\n    }\n    return `${categoryName} Budget`\n  }\n\n  // If no budget or categories are set, don't show anything\n  const hasOverallBudget = budget !== null && budget !== undefined && budget > 0\n  const hasDesignFee = designFee !== null && designFee !== undefined && designFee > 0\n  const hasCategoryBudgets = budgetCategories && Object.values(budgetCategories).some(v => v > 0)\n\n  if (!hasOverallBudget && !hasDesignFee && !hasCategoryBudgets) {\n    return null\n  }\n\n  // In preview mode, use same format as full mode but without toggle and only showing primary budget\n  if (previewMode) {\n    return (\n      <div className=\"mb-6\">\n        {/* Category Budget Progress */}\n        {(categoryData.length > 0 || overallBudgetCategory) && (\n          <div>\n\n            <div className=\"space-y-4\">\n              {[...categoryData, ...(overallBudgetCategory ? [overallBudgetCategory] : [])].map((category) => {\n                const isDesignFee = category.category === BudgetCategory.DESIGN_FEE\n                return (\n                  <div key={category.category}>\n                    <div className=\"mb-2\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <span className=\"text-base font-medium text-gray-900\">{formatCategoryName(category.category)}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-500\">\n                          ${Math.round(category.spent).toLocaleString('en-US')} {isDesignFee ? 'received' : 'spent'}\n                        </span>\n                        <span className={`text-sm ${isDesignFee ? getDesignFeeRemainingColor(category.percentage) : getRemainingColor(category.percentage)}`}>\n                          <span className=\"font-bold\">${Math.round((category.budget || 0) - category.spent).toLocaleString('en-US')}</span> remaining\n                        </span>\n                      </div>\n                    </div>\n\n                    {/* Progress Bar */}\n                    <div className=\"relative\">\n                      <div className=\"w-full bg-gray-200 rounded-full h-2 mb-1\">\n                        <div\n                          className={`h-2 rounded-full transition-all duration-300 ${\n                            isDesignFee ? getDesignFeeProgressColor(category.percentage) : getProgressColor(category.percentage)\n                          }`}\n                          style={{ width: `${Math.min(category.percentage, 100)}%` }}\n                        />\n                      </div>\n\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n\n          </div>\n        )}\n\n        {/* Show message if no budgets are configured */}\n        {!budget && !designFee && (!budgetCategories || Object.values(budgetCategories).every(v => v === 0)) && (\n          <div className=\"text-center py-4 text-gray-500\">\n            <p>No budgets configured for this project.</p>\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  // Full mode with toggle functionality\n  return (\n    <div className=\"mb-6\">\n      {/* Category Budget Progress */}\n      {(categoryData.length > 0 || overallBudgetCategory) && (\n        <div>\n\n          <div className=\"space-y-4\">\n            {[...categoryData, ...(overallBudgetCategory ? [overallBudgetCategory] : [])].map((category) => {\n              const isDesignFee = category.category === BudgetCategory.DESIGN_FEE\n              return (\n                <div key={category.category}>\n                  <div className=\"mb-2\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"text-base font-medium text-gray-900\">{formatCategoryName(category.category)}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-500\">\n                        ${Math.round(category.spent).toLocaleString('en-US')} {isDesignFee ? 'received' : 'spent'}\n                      </span>\n                      <span className={`text-sm ${isDesignFee ? getDesignFeeRemainingColor(category.percentage) : getRemainingColor(category.percentage)}`}>\n                        <span className=\"font-bold\">${Math.round((category.budget || 0) - category.spent).toLocaleString('en-US')}</span> remaining\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Progress Bar */}\n                  <div className=\"relative\">\n                    <div className=\"w-full bg-gray-200 rounded-full h-2 mb-1\">\n                      <div\n                        className={`h-2 rounded-full transition-all duration-300 ${\n                          isDesignFee ? getDesignFeeProgressColor(category.percentage) : getProgressColor(category.percentage)\n                        }`}\n                        style={{ width: `${Math.min(category.percentage, 100)}%` }}\n                      />\n                    </div>\n\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n\n          {/* Show All Categories Toggle - positioned at bottom */}\n          {(allCategoryData.some(cat => cat.category !== BudgetCategory.FURNISHINGS && cat.category !== BudgetCategory.DESIGN_FEE) || (budget !== null && budget !== undefined && budget > 0)) && (\n            <div className=\"mt-4\">\n              <button\n                onClick={() => setShowAllCategories(!showAllCategories)}\n                className=\"inline-flex items-center text-sm font-medium text-primary-600 hover:text-primary-800 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\"\n              >\n                {showAllCategories ? (\n                  <>\n                    <ChevronUp className=\"h-4 w-4 mr-1\" />\n                    Show Less\n                  </>\n                ) : (\n                  <>\n                    <ChevronDown className=\"h-4 w-4 mr-1\" />\n                    Show All Budget Categories\n                  </>\n                )}\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Show message if no budgets are configured */}\n      {!budget && !designFee && (!budgetCategories || Object.values(budgetCategories).every(v => v === 0)) && (\n        <div className=\"text-center py-4 text-gray-500\">\n          <p>No budgets configured for this project.</p>\n        </div>\n      )}\n    </div>\n  )\n}\n\n"],"names":["ProjectForm","onSubmit","onCancel","isLoading","initialData","isEditing","formData","setFormData","useState","errors","setErrors","handleChange","field","value","prev","processedValue","validateForm","newErrors","handleSubmit","e","error","jsx","jsxs","X","DollarSign","_a","_b","_d","_c","newBudgetCategories","_e","_f","_h","_g","_j","_i","_l","_k","_n","_m","BudgetProgress","budget","designFee","budgetCategories","transactions","previewMode","showAllCategories","setShowAllCategories","calculateSpent","transaction","total","calculateCategoryBudgetData","categoryData","BudgetCategory","key","label","categoryBudget","designFeeReceived","percentage","categorySpent","spent","allCategoryData","overallBudgetCategory","furnishingsCategory","cat","category","hasPrimaryCategories","getProgressColor","getRemainingColor","getDesignFeeProgressColor","getDesignFeeRemainingColor","formatCategoryName","categoryName","hasOverallBudget","hasDesignFee","hasCategoryBudgets","v","isDesignFee","Fragment","ChevronUp","ChevronDown"],"mappings":"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"}