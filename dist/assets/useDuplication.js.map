{"version":3,"mappings":";sEAUO,SAASA,EAA8C,CAC5D,MAAAC,EACA,SAAUC,EACV,UAAAC,EACA,mBAAAC,CACF,EAA6B,CAC3B,KAAM,CAAE,YAAAC,EAAa,UAAAC,CAAA,EAAcC,EAAA,EAmCnC,MAAO,CAAE,cAjCaC,cAAY,MAAOC,GAAmB,CAC1D,GAAI,CAEF,GAAI,CADSR,EAAM,KAAKS,GAAQA,EAAK,UAAYD,CAAM,EAC5C,CACTH,EAAU,gBAAgB,EAC1B,MACF,CAEA,IAAIK,EAEJ,GAAIP,EAEFO,EAAY,MAAMP,EAAmBK,CAAM,UAClCN,EAAW,CAEpB,KAAM,CAAE,oBAAAS,CAAA,EAAwB,MAAAC,EAAA,oCAAAD,GAAA,KAAM,QAAO,uBAA6B,mEAC1ED,EAAY,MAAMC,EAAoB,cAAcT,EAAWM,CAAM,CACvE,KAAO,CACLH,EAAU,kCAAkC,EAC5C,MACF,CAGAD,EAAY,8CAA8CM,CAAS,EAAE,CAIvE,OAASG,EAAO,CACd,QAAQ,MAAM,4BAA6BA,CAAK,EAChDR,EAAU,6CAA6C,CACzD,CACF,EAAG,CAACL,EAAOE,EAAWC,EAAoBC,EAAaC,CAAS,CAAC,CAExD,CACX","names":["useDuplication","items","_setItems","projectId","duplicationService","showSuccess","showError","useToast","useCallback","itemId","item","newItemId","unifiedItemsService","__vitePreload","error"],"ignoreList":[],"sources":["../../src/hooks/useDuplication.ts"],"sourcesContent":["import { useCallback } from 'react'\nimport { useToast } from '@/components/ui/ToastContext'\n\ninterface UseDuplicationOptions<T extends { item_id: string }> {\n  items: T[]\n  setItems?: (items: T[] | ((prev: T[]) => T[])) => void\n  projectId?: string | undefined\n  duplicationService?: (itemId: string) => Promise<string>\n}\n\nexport function useDuplication<T extends { item_id: string }>({\n  items,\n  setItems: _setItems,\n  projectId,\n  duplicationService\n}: UseDuplicationOptions<T>) {\n  const { showSuccess, showError } = useToast()\n\n  const duplicateItem = useCallback(async (itemId: string) => {\n    try {\n      const item = items.find(item => item.item_id === itemId)\n      if (!item) {\n        showError('Item not found')\n        return\n      }\n\n      let newItemId: string\n\n      if (duplicationService) {\n        // Use custom duplication service (e.g., for business inventory)\n        newItemId = await duplicationService(itemId)\n      } else if (projectId) {\n        // Use default project item duplication service (unified collection)\n        const { unifiedItemsService } = await import('@/services/inventoryService')\n        newItemId = await unifiedItemsService.duplicateItem(projectId, itemId)\n      } else {\n        showError('No duplication service available')\n        return\n      }\n\n      // The real-time listener will handle the UI update, but we'll show a success message\n      showSuccess(`Item duplicated successfully! New item ID: ${newItemId}`)\n\n      // Note: We don't need to manually update local state here because\n      // the real-time listener in the parent component will handle it\n    } catch (error) {\n      console.error('Failed to duplicate item:', error)\n      showError('Failed to duplicate item. Please try again.')\n    }\n  }, [items, projectId, duplicationService, showSuccess, showError])\n\n  return { duplicateItem }\n}\n"],"file":"assets/useDuplication.js"}