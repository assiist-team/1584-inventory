import{t as g,z as u,N as b,O,m as p,P as L,B as R,Q as E,q as T,u as S,A as y,R as $,D as q,s as N,S as F,U as V,V as W}from"./firebase.js";import{e as A,f as D,d}from"./index.js";const U={NV:8.375,UT:7.1},Q=a=>{if(!a)return null;if(a instanceof Date)return a;if(typeof a=="object"&&a){if("toDate"in a&&typeof a.toDate=="function")try{return a.toDate()}catch(t){return console.warn("Failed to convert Firestore Timestamp to Date:",t),null}if("seconds"in a&&"nanoseconds"in a)try{return new Date(a.seconds*1e3+a.nanoseconds/1e6)}catch(t){return console.warn("Failed to convert Firestore Timestamp to Date:",t),null}}if(typeof a=="string")try{if(/^\d{4}-\d{2}-\d{2}$/.test(a)){const[n,e,o]=a.split("-").map(Number),r=new Date(n,e-1,o);return isNaN(r.getTime())?null:r}const t=new Date(a);return isNaN(t.getTime())?null:t}catch(t){return console.warn("Failed to parse date string:",a,t),null}if(typeof a=="number")try{const t=new Date(a);return isNaN(t.getTime())?null:t}catch(t){return console.warn("Failed to convert number to Date:",a,t),null}return null},J=(a,t="Unknown")=>{const n=Q(a);if(!n)return t;try{return n.toLocaleDateString("en-US",{year:"numeric",month:"short",day:"numeric"})}catch(e){return console.warn("Failed to format date:",a,e),t}},Z=(a,t="$0.00")=>{const n=typeof a=="string"?parseFloat(a):a;return isNaN(n)?t:n.toLocaleString("en-US",{style:"currency",currency:"USD",minimumFractionDigits:2,maximumFractionDigits:2})},x=a=>{if(!a)return"";if(typeof a=="string"&&/^\d{4}-\d{2}-\d{2}$/.test(a))return a;const t=Q(a);if(!t)return"";const n=t.getFullYear(),e=String(t.getMonth()+1).padStart(2,"0"),o=String(t.getDate()).padStart(2,"0");return`${n}-${e}-${o}`},w={async logAllocationEvent(a,t,n,e,o){try{let r=null,s={};typeof e=="string"?(r=e,s=o||{}):(r=null,s=e||{});const i=g(d,"audit_logs");await E(i,{event_type:a,item_id:t,project_id:n,transaction_id:r,details:s,timestamp:V(),created_at:new Date().toISOString()}),console.log(`📋 Audit logged: ${a} for item ${t}`)}catch(r){console.warn("⚠️ Failed to log audit event (non-critical):",r)}},async logTransactionStateChange(a,t,n,e){try{const o=g(d,"transaction_audit_logs");await E(o,{transaction_id:a,change_type:t,old_state:n,new_state:e,timestamp:V(),created_at:new Date().toISOString()}),console.log(`📋 Transaction audit logged: ${t} for ${a}`)}catch(o){console.warn("⚠️ Failed to log transaction audit (non-critical):",o)}}},C={async getProjects(){await A();const a=g(d,"projects"),t=u(a,b("updatedAt","desc"));return(await S(t)).docs.map(e=>{const o=D(e.data());return{id:e.id,...o}})},async getProject(a){await A();const t=p(d,"projects",a),n=await T(t);if(n.exists()){const e=D(n.data());return{id:n.id,...e}}return null},async createProject(a){const t=g(d,"projects"),n=new Date,e={...a,createdAt:n,updatedAt:n};return(await E(t,e)).id},async updateProject(a,t){const n=p(d,"projects",a);await R(n,{...t,updatedAt:new Date})},async deleteProject(a){const t=p(d,"projects",a);await L(t)},subscribeToProjects(a){const t=g(d,"projects"),n=u(t,b("updatedAt","desc"));return O(n,e=>{const o=e.docs.map(r=>{const s=D(r.data());return{id:r.id,...s}});a(o)})}},K={async getTransactions(a){const t=g(d,"transactions"),n=u(t,y("project_id","==",a),b("created_at","desc"));return(await S(n)).docs.map(o=>{const r=D(o.data()),s={...r,transaction_images:Array.isArray(r.transaction_images)?r.transaction_images:[],receipt_images:Array.isArray(r.receipt_images)?r.receipt_images:[],other_images:Array.isArray(r.other_images)?r.other_images:[]};return{transaction_id:o.id,...s}})},async getTransaction(a,t){const n=p(d,"transactions",t),e=await T(n);if(e.exists()){const o=D(e.data());console.log("inventoryService - raw data:",o),console.log("inventoryService - transaction_images:",o.transaction_images),console.log("inventoryService - transaction_images type:",typeof o.transaction_images);const r={...o,transaction_images:Array.isArray(o.transaction_images)?o.transaction_images:[],receipt_images:Array.isArray(o.receipt_images)?o.receipt_images:[],other_images:Array.isArray(o.other_images)?o.other_images:[]};return console.log("inventoryService - processed transactionData:",r),{transaction_id:e.id,...r}}return null},async getTransactionById(a){const t=p(d,"transactions",a),n=await T(t);if(n.exists()){const e=D(n.data()),o={...e,transaction_images:Array.isArray(e.transaction_images)?e.transaction_images:[],receipt_images:Array.isArray(e.receipt_images)?e.receipt_images:[],other_images:Array.isArray(e.other_images)?e.other_images:[]};return{transaction:{transaction_id:n.id,...o},projectId:e.project_id||null}}return{transaction:null,projectId:null}},async createTransaction(a,t,n){try{const e=g(d,"transactions"),r={...t,project_id:a,created_at:new Date().toISOString(),status:t.status||"completed",reimbursement_type:t.reimbursement_type||null,trigger_event:t.trigger_event||null};console.log("Creating transaction:",r),console.log("Transaction items:",n);const s={...r};if(s.tax_state==="NV"||s.tax_state==="UT"){const _=U[s.tax_state];if(_==null)throw new Error("Configured tax rate for selected state is missing.");s.tax_rate_pct=_,s.subtotal!==void 0&&delete s.subtotal}else if(s.tax_state==="Other"){const _=parseFloat(s.amount||"0"),l=parseFloat(s.subtotal||"0");if(isNaN(l)||l<=0)throw new Error("Subtotal must be greater than 0 when Tax state is Other.");if(isNaN(_)||_<l)throw new Error("Subtotal cannot exceed the total amount.");const m=(_-l)/l*100;s.tax_rate_pct=Math.round(m*1e4)/1e4}const c=(await E(e,s)).id;if(console.log("Transaction created successfully:",c),n&&n.length>0){console.log("Creating items for transaction:",c);const _=n.map(m=>({...m})),l=await P.createTransactionItems(a||"",c,t.transaction_date,t.source,_,s.tax_rate_pct);console.log("Created items:",l)}return c}catch(e){throw console.error("Error creating transaction:",e),e}},async updateTransaction(a,t,n){const e=p(d,"transactions",t),o={...n};o.status==="completed"&&o.reimbursement_type!==void 0&&(o.reimbursement_type=$()),o.reimbursement_type===""&&(o.reimbursement_type=$()),o.reimbursement_type&&o.status==="completed"&&(o.status="pending");const r={};Object.keys(o).forEach(i=>{o[i]!==void 0&&(r[i]=o[i])});const s={...r};if(s.tax_state==="NV"||s.tax_state==="UT")try{s.tax_rate_pct=U[s.tax_state],s.subtotal!==void 0&&(s.subtotal=$())}catch(i){console.warn("Tax mapping failed during update:",i)}else if(s.tax_state==="Other"){const i=await T(e),c=i.exists()?i.data():{},_=s.amount!==void 0?parseFloat(s.amount):parseFloat(c.amount||"0"),l=s.subtotal!==void 0?parseFloat(s.subtotal):parseFloat(c.subtotal||"0");if(!isNaN(_)&&!isNaN(l)&&l>0&&_>=l){const m=(_-l)/l*100;s.tax_rate_pct=Math.round(m*1e4)/1e4}}if(await R(e,s),s.tax_rate_pct!==void 0)try{const i=await P.getItemsForTransaction(a,t);if(i&&i.length>0){const c=q(d);i.forEach(_=>{const l=p(d,"items",_.item_id);c.update(l,{tax_rate_pct:s.tax_rate_pct,last_updated:new Date().toISOString()})}),await c.commit()}}catch(i){console.warn("Failed to propagate tax_rate_pct to items:",i)}},async deleteTransaction(a,t){const n=p(d,"transactions",t);await L(n)},subscribeToTransactions(a,t){const n=g(d,"transactions"),e=u(n,y("project_id","==",a),b("created_at","desc"));return O(e,o=>{const r=o.docs.map(s=>{const i=D(s.data()),c={...i,transaction_images:Array.isArray(i.transaction_images)?i.transaction_images:[],receipt_images:Array.isArray(i.receipt_images)?i.receipt_images:[],other_images:Array.isArray(i.other_images)?i.other_images:[]};return{transaction_id:s.id,...c}});t(r)})},subscribeToTransaction(a,t,n){const e=p(d,"transactions",t);return O(e,o=>{if(o.exists()){const r=D(o.data());console.log("inventoryService - real-time raw data:",r),console.log("inventoryService - real-time transaction_images:",r.transaction_images);const s={...r,transaction_images:Array.isArray(r.transaction_images)?r.transaction_images:[],receipt_images:Array.isArray(r.receipt_images)?r.receipt_images:[],other_images:Array.isArray(r.other_images)?r.other_images:[]};console.log("inventoryService - real-time processed transactionData:",s);const i={transaction_id:o.id,...s};n(i)}else n(null)})},async getPendingTransactions(a){const t=g(d,"projects",a,"transactions"),n=u(t,y("status","==","pending"),b("created_at","desc"));return(await S(n)).docs.map(o=>{const r=D(o.data()),s={...r,transaction_images:Array.isArray(r.transaction_images)?r.transaction_images:[],receipt_images:Array.isArray(r.receipt_images)?r.receipt_images:[],other_images:Array.isArray(r.other_images)?r.other_images:[]};return{transaction_id:o.id,...s}})},async updateTransactionStatus(a,t,n,e){const o=p(d,"projects",a,"transactions",t),r={status:n,...e};n==="completed"&&!(e!=null&&e.transaction_date)&&(r.transaction_date=x(new Date)),r.last_updated=new Date().toISOString(),await R(o,r)},async getInventoryRelatedTransactions(){const a=g(d,"transactions"),t=u(a,y("reimbursement_type","in",["Client Owes","We Owe"]),b("created_at","desc"));return(await S(t)).docs.map(e=>{const o=D(e.data()),r={...o,transaction_images:Array.isArray(o.transaction_images)?o.transaction_images:[],receipt_images:Array.isArray(o.receipt_images)?o.receipt_images:[],other_images:Array.isArray(o.other_images)?o.other_images:[]};return{transaction_id:e.id,...r}})},async getBusinessInventoryTransactions(){const a=g(d,"transactions"),t=u(a,y("project_id","==",null),b("created_at","desc"));return(await S(t)).docs.map(e=>{const o=D(e.data()),r={...o,transaction_images:Array.isArray(o.transaction_images)?o.transaction_images:[],receipt_images:Array.isArray(o.receipt_images)?o.receipt_images:[],other_images:Array.isArray(o.other_images)?o.other_images:[]};return{transaction_id:e.id,...r}})}},P={async getItemsByProject(a,t,n){await A();const e=g(d,"items");let o=u(e,y("project_id","==",a));if(t!=null&&t.status&&(o=u(o,y("disposition","==",t.status))),t!=null&&t.category&&(o=u(o,y("source","==",t.category))),t!=null&&t.tags&&t.tags.length>0&&(o=u(o,y("tags","array-contains-any",t.tags))),t!=null&&t.priceRange&&(o=u(o,y("project_price",">=",t.priceRange.min),y("project_price","<=",t.priceRange.max))),t!=null&&t.searchQuery){const i=t.searchQuery.toLowerCase();o=u(o,y("description",">=",i),y("description","<=",i+""))}o=u(o,b("last_updated","desc")),n&&(o=u(o,F(n.limit)),n.page>0&&(o=u(o,F(n.page*n.limit))));let s=(await S(o)).docs.map(i=>({item_id:i.id,...i.data()}));if(t!=null&&t.searchQuery&&s.length>0){const i=t.searchQuery.toLowerCase();s=s.filter(c=>c.description.toLowerCase().includes(i)||c.source.toLowerCase().includes(i)||c.sku.toLowerCase().includes(i)||c.payment_method.toLowerCase().includes(i))}return s},subscribeToItemsByProject(a,t,n){const e=g(d,"items");let o=u(e,y("project_id","==",a),b("last_updated","desc"));if(n!=null&&n.status&&(o=u(o,y("disposition","==",n.status))),n!=null&&n.category&&(o=u(o,y("source","==",n.category))),n!=null&&n.searchQuery){const r=n.searchQuery.toLowerCase();o=u(o,y("description",">=",r),y("description","<=",r+""))}return O(o,r=>{let s=r.docs.map(i=>({item_id:i.id,...i.data()}));if(n!=null&&n.searchQuery){const i=n.searchQuery.toLowerCase();s=s.filter(c=>c.description.toLowerCase().includes(i)||c.source.toLowerCase().includes(i)||c.sku.toLowerCase().includes(i)||c.payment_method.toLowerCase().includes(i))}t(s)})},async getBusinessInventoryItems(a,t){await A();const n=g(d,"items");let e=u(n,y("project_id","==",null));a!=null&&a.status&&(e=u(e,y("inventory_status","==",a.status))),e=u(e,b("last_updated","desc")),t&&(e=u(e,F(t.limit)),t.page>0&&(e=u(e,F(t.page*t.limit))));let r=(await S(e)).docs.map(s=>({item_id:s.id,...s.data()}));if(a!=null&&a.searchQuery){const s=a.searchQuery.toLowerCase();r=r.filter(i=>{var c;return i.description.toLowerCase().includes(s)||i.source.toLowerCase().includes(s)||i.sku.toLowerCase().includes(s)||((c=i.business_inventory_location)==null?void 0:c.toLowerCase().includes(s))})}return r},subscribeToBusinessInventory(a,t){const n=g(d,"items");let e=u(n,y("project_id","==",null),b("last_updated","desc"));return t!=null&&t.status&&(e=u(e,y("inventory_status","==",t.status))),O(e,o=>{let r=o.docs.map(s=>({item_id:s.id,...s.data()}));if(t!=null&&t.searchQuery){const s=t.searchQuery.toLowerCase();r=r.filter(i=>{var c;return i.description.toLowerCase().includes(s)||i.source.toLowerCase().includes(s)||i.sku.toLowerCase().includes(s)||((c=i.business_inventory_location)==null?void 0:c.toLowerCase().includes(s))})}a(r)})},async createItem(a){await A();const t=g(d,"items"),n=new Date,e={...a,inventory_status:a.inventory_status||"available",date_created:n.toISOString(),last_updated:n.toISOString()};try{if(e.transaction_id&&e.tax_rate_pct===void 0){const r=p(d,"transactions",e.transaction_id),s=await T(r);if(s.exists()){const i=s.data();i.tax_rate_pct!==void 0&&i.tax_rate_pct!==null&&(e.tax_rate_pct=i.tax_rate_pct)}}}catch(r){console.warn("Failed to inherit tax_rate_pct when creating item:",r)}return(await E(t,e)).id},async updateItem(a,t){await A();const n=p(d,"items",a),e={last_updated:new Date().toISOString()};t.inventory_status!==void 0&&(e.inventory_status=t.inventory_status),t.project_id!==void 0&&(e.project_id=t.project_id),t.business_inventory_location!==void 0&&(e.business_inventory_location=t.business_inventory_location),t.transaction_id!==void 0&&(e.transaction_id=t.transaction_id),t.purchase_price!==void 0&&(e.purchase_price=t.purchase_price),t.project_price!==void 0&&(e.project_price=t.project_price),t.description!==void 0&&(e.description=t.description),t.source!==void 0&&(e.source=t.source),t.sku!==void 0&&(e.sku=t.sku),t.market_value!==void 0&&(e.market_value=t.market_value),t.payment_method!==void 0&&(e.payment_method=t.payment_method),t.disposition!==void 0&&(e.disposition=t.disposition),t.notes!==void 0&&(e.notes=t.notes),t.space!==void 0&&(e.space=t.space),t.bookmark!==void 0&&(e.bookmark=t.bookmark),t.images!==void 0&&(e.images=t.images),t.tax_rate_pct!==void 0&&(e.tax_rate_pct=t.tax_rate_pct),t.tax_amount!==void 0&&(e.tax_amount=t.tax_amount);try{const o=t.transaction_id!==void 0&&t.transaction_id!==null,r=t.tax_rate_pct===void 0||t.tax_rate_pct===null;if(o&&r){const s=t.transaction_id;if(s){const i=p(d,"transactions",s),c=await T(i);if(c.exists()){const _=c.data();_.tax_rate_pct!==void 0&&_.tax_rate_pct!==null&&(e.tax_rate_pct=_.tax_rate_pct)}}}}catch(o){console.warn("Failed to inherit tax_rate_pct when updating item:",o)}await R(n,e)},async deleteItem(a){await A();const t=p(d,"items",a);await L(t)},async getItemsForTransaction(a,t){await A();const n=g(d,"items"),e=u(n,y("transaction_id","==",t),b("date_created","asc"));return(await S(e)).docs.map(r=>({item_id:r.id,...r.data()}))},async allocateItemToProject(a,t,n,e,o){await A();const r=await this.getItemById(a);if(!r)throw new Error("Item not found");const s=n||r.project_price||r.market_value||"0.00",i=r.transaction_id||null;console.log("🔄 Starting allocation process:",{itemId:a,projectId:t,currentTransactionId:i,itemProjectId:r.project_id,finalAmount:s});try{await w.logAllocationEvent("allocation",a,r.project_id,i,{action:"allocation_started",target_project_id:t,current_transaction_id:i,amount:s})}catch(c){console.warn("⚠️ Failed to log allocation start:",c)}return i!=null&&i.startsWith("INV_SALE_")?i.replace("INV_SALE_","")===t?(console.log("📋 Scenario A.1: Item in Sale, allocating to same project → move to inventory"),await this.handleSaleToInventoryMove(a,i,t,s,e,o)):(console.log("📋 Scenario A.2: Item in Sale, allocating to different project"),await this.handleSaleToDifferentProjectMove(a,i,t,s,e,o)):i!=null&&i.startsWith("INV_PURCHASE_")?i.replace("INV_PURCHASE_","")===t?(console.log("📋 Scenario B.1: Item in Purchase, allocating to same project"),await this.handlePurchaseToInventoryMove(a,i,t,s,e,o)):(console.log("📋 Scenario B.2: Item in Purchase, allocating to different project"),await this.handlePurchaseToDifferentProjectMove(a,i,t,s,e,o)):i?(console.log("📋 Fallback: Unknown scenario, treating as new allocation"),await this.handleInventoryToPurchaseMove(a,t,s,e)):(console.log("📋 Scenario C: Item in inventory, allocating to project"),await this.handleInventoryToPurchaseMove(a,t,s,e,o))},async handleSaleToPurchaseMove(a,t,n,e,o,r){const s=`INV_PURCHASE_${n}`;await this.removeItemFromTransaction(a,t,e),await this.addItemToTransaction(a,s,e,"Purchase","Inventory allocation",o),await this.updateItem(a,{project_id:n,inventory_status:"allocated",transaction_id:s,disposition:"keep",space:r}),console.log("✅ A.1 completed: Sale → Purchase (same project)");try{await w.logAllocationEvent("allocation",a,n,s,{action:"allocation_completed",scenario:"A.1",from_transaction:t,to_transaction:s,amount:e})}catch(i){console.warn("⚠️ Failed to log allocation completion:",i)}return s},async handleSaleToInventoryMove(a,t,n,e,o,r){await this.removeItemFromTransaction(a,t,e),await this.updateItem(a,{project_id:n,inventory_status:"allocated",transaction_id:null,disposition:"keep",space:r??""}),console.log("✅ A.1 completed: Sale → Inventory (same project)");try{await w.logAllocationEvent("allocation",a,n,null,{action:"allocation_completed",scenario:"A.1",from_transaction:t,to_status:"allocated",amount:e})}catch(s){console.warn("⚠️ Failed to log allocation completion (A.1):",s)}return t},async handleSaleToDifferentProjectMove(a,t,n,e,o,r){const s=`INV_PURCHASE_${n}`;await this.removeItemFromTransaction(a,t,e),await this.addItemToTransaction(a,s,e,"Purchase","Inventory allocation",o),await this.updateItem(a,{project_id:n,inventory_status:"allocated",transaction_id:s,disposition:"keep",space:r}),console.log("✅ A.2 completed: Sale → Purchase (different project)");try{await w.logAllocationEvent("allocation",a,n,s,{action:"allocation_completed",scenario:"A.2",from_transaction:t,to_transaction:s,amount:e})}catch(i){console.warn("⚠️ Failed to log allocation completion:",i)}return s},async handlePurchaseToInventoryMove(a,t,n,e,o,r){await this.removeItemFromTransaction(a,t,e),await this.updateItem(a,{project_id:null,inventory_status:"available",disposition:"inventory",notes:o,space:r??""}),console.log("✅ B.1 completed: Purchase → Inventory (same project)");try{await w.logAllocationEvent("deallocation",a,null,"inventory",{action:"deallocation_completed",scenario:"B.1",from_transaction:t,to_status:"inventory",amount:e})}catch(s){console.warn("⚠️ Failed to log deallocation completion:",s)}return t},async handlePurchaseToDifferentProjectMove(a,t,n,e,o,r){const s=`INV_SALE_${n}`;await this.removeItemFromTransaction(a,t,e),await this.addItemToTransaction(a,s,e,"To Inventory","Inventory sale",o),await this.updateItem(a,{project_id:null,inventory_status:"available",transaction_id:s,disposition:"inventory",space:r??""}),console.log("✅ B.2 completed: Purchase → Sale (different project)");try{await w.logAllocationEvent("allocation",a,null,s,{action:"allocation_completed",scenario:"B.2",from_transaction:t,to_transaction:s,amount:e})}catch(i){console.warn("⚠️ Failed to log allocation completion:",i)}return s},async handleInventoryToPurchaseMove(a,t,n,e,o){const r=`INV_PURCHASE_${t}`;await this.addItemToTransaction(a,r,n,"Purchase","Inventory allocation",e),await this.updateItem(a,{project_id:t,inventory_status:"allocated",transaction_id:r,disposition:"keep",space:o}),console.log("✅ C completed: Inventory → Purchase (new allocation)");try{await w.logAllocationEvent("allocation",a,t,r,{action:"allocation_completed",scenario:"C",from_status:"inventory",to_transaction:r,amount:n})}catch(s){console.warn("⚠️ Failed to log allocation completion:",s)}return r},async removeItemFromTransaction(a,t,n){const e=p(d,"transactions",t),o=await T(e);if(!o.exists()){console.warn("⚠️ Transaction not found for removal:",t);return}const r=o.data(),i=(r.item_ids||[]).filter(c=>c!==a);if(i.length===0)try{await L(e),console.log("🗑️ Deleted empty transaction:",t);try{await w.logTransactionStateChange(t,"deleted",r,null)}catch(c){console.warn("⚠️ Failed to log transaction deletion:",c)}}catch(c){console.error("❌ Failed to delete empty transaction:",t,c)}else try{const c=g(d,"items"),_=u(c,y("__name__","in",i)),m=(await S(_)).docs.map(f=>f.data().project_price||f.data().market_value||"0.00").reduce((f,h)=>f+parseFloat(h||"0"),0).toFixed(2),v=parseFloat(m)<0?"0.00":m,k={item_ids:i,amount:v,last_updated:new Date().toISOString()};await R(e,k),console.log("🔄 Updated transaction after removal:",t,"new amount:",v);try{await w.logTransactionStateChange(t,"updated",r,k)}catch(f){console.warn("⚠️ Failed to log transaction update:",f)}}catch(c){console.error("❌ Failed to update transaction after removal:",t,c)}},async addItemToTransaction(a,t,n,e,o,r){const s=p(d,"transactions",t),i=await T(s);if(i.exists())try{const c=i.data(),_=c.item_ids||[],l=[...new Set([..._,a])],m=g(d,"items"),v=u(m,y("__name__","in",l)),f=(await S(v)).docs.map(j=>j.data().project_price||j.data().market_value||"0.00").reduce((j,B)=>j+parseFloat(B||"0"),0).toFixed(2),h=parseFloat(f)<0?"0.00":f,I={item_ids:l,amount:h,last_updated:new Date().toISOString()};await R(s,I),console.log("🔄 Added item to existing transaction:",t,"new amount:",h);try{await w.logTransactionStateChange(t,"updated",c,I)}catch(j){console.warn("⚠️ Failed to log transaction update:",j)}try{const j=c.tax_rate_pct;if(j!=null){const B=p(d,"items",a);await R(B,{tax_rate_pct:j,last_updated:new Date().toISOString()})}}catch(j){console.warn("Failed to set tax_rate_pct on added item:",a,j)}}catch(c){console.error("❌ Failed to update existing transaction:",t,c)}else try{const c=await C.getProject(t.replace(e==="Purchase"?"INV_PURCHASE_":"INV_SALE_","")),_=(c==null?void 0:c.name)||"Other",l={project_id:t.replace(e==="Purchase"?"INV_PURCHASE_":"INV_SALE_",""),project_name:null,transaction_date:x(new Date),source:e==="Purchase"?"Inventory":_,transaction_type:e,payment_method:"Pending",amount:n,budget_category:"Furnishings",notes:r||`Transaction for items ${e==="Purchase"?"purchased from":"sold to"} ${e==="Purchase"?"inventory":"project"}`,status:"pending",reimbursement_type:e==="Purchase"?"Client Owes":"We Owe",trigger_event:o,item_ids:[a],created_by:"system",created_at:new Date().toISOString(),last_updated:new Date().toISOString()};await N(s,l),console.log("🆕 Created new transaction:",t,"amount:",n);try{await w.logTransactionStateChange(t,"created",null,l)}catch(m){console.warn("⚠️ Failed to log transaction creation:",m)}}catch(c){console.error("❌ Failed to create new transaction:",t,c)}},async batchAllocateItemsToProject(a,t,n={}){await A();const e=g(d,"items"),o=u(e,y("__name__","in",a)),r=await S(o);if(r.empty)throw new Error("No items found for allocation");const s=`INV_PURCHASE_${t}`;for(const i of r.docs){const c=i.id,_=i.data(),l=n.amount||_.project_price||_.market_value||"0.00",m=_.transaction_id||null;if(m!=null&&m.startsWith("INV_SALE_"))if(m.replace("INV_SALE_","")===t){console.log("📋 Batch A.1: Item in sale for target project — removing from sale and assigning to project",c),await this.removeItemFromTransaction(c,m,l),await this.updateItem(c,{project_id:t,inventory_status:"allocated",transaction_id:null,disposition:"keep",notes:n.notes,space:n.space||"",last_updated:new Date().toISOString()});continue}else{console.log("📋 Batch A.2: Item in sale for different project — moving to purchase for target project",c),await this.removeItemFromTransaction(c,m,l),await this.addItemToTransaction(c,s,l,"Purchase","Inventory allocation",n.notes),await this.updateItem(c,{project_id:t,inventory_status:"allocated",transaction_id:s,disposition:"keep",space:n.space||"",last_updated:new Date().toISOString()});continue}if(!m){console.log("📋 Batch C: Item in inventory — adding to purchase",c),await this.addItemToTransaction(c,s,l,"Purchase","Inventory allocation",n.notes),await this.updateItem(c,{project_id:t,inventory_status:"allocated",transaction_id:s,disposition:"keep",space:n.space||"",last_updated:new Date().toISOString()});continue}console.log("📋 Batch Fallback: Item in other transaction — adding to purchase",c,m),await this.addItemToTransaction(c,s,l,"Purchase","Inventory allocation",n.notes),await this.updateItem(c,{project_id:t,inventory_status:"allocated",transaction_id:s,disposition:"keep",space:n.space||"",last_updated:new Date().toISOString()})}return s},async returnItemFromProject(a,t,n,e){await A();const o=await this.getItemById(a);if(!o)throw new Error("Item not found");const r=n||o.project_price||o.market_value||"0.00",s=o.transaction_id||null;console.log("🔄 Starting return process:",{itemId:a,projectId:t,currentTransactionId:s,itemProjectId:o.project_id,finalAmount:r});try{await w.logAllocationEvent("return",a,o.project_id,s,{action:"return_started",target_project_id:t,current_transaction_id:s,amount:r})}catch(i){console.warn("⚠️ Failed to log return start:",i)}return s!=null&&s.startsWith("INV_PURCHASE_")&&s.replace("INV_PURCHASE_","")===t?(console.log("📋 Return Scenario: Item in Purchase, returning from same project"),await this.handleReturnFromPurchase(a,s,t,r,e)):(console.log("📋 Return Scenario: Item not in transaction or new return"),await this.handleNewReturn(a,t,r,e))},async handleReturnFromPurchase(a,t,n,e,o){await this.removeItemFromTransaction(a,t,e),await this.updateItem(a,{project_id:null,inventory_status:"available",transaction_id:null,disposition:"inventory",notes:o}),console.log("✅ Return completed: Purchase → Inventory (same project)");try{await w.logAllocationEvent("return",a,null,t,{action:"return_completed",scenario:"return_from_purchase",from_transaction:t,to_status:"inventory",amount:e})}catch(r){console.warn("⚠️ Failed to log return completion:",r)}return t},async handleNewReturn(a,t,n,e){let o="Other";try{const c=await C.getProject(t);o=(c==null?void 0:c.name)||"Other"}catch(c){console.warn("Could not fetch project name for transaction source:",c)}const r=`INV_SALE_${t}`,s={project_id:t,project_name:null,transaction_date:x(new Date),source:o,transaction_type:"To Inventory",payment_method:"Pending",amount:n,budget_category:"Furnishings",notes:e||"Transaction for items purchased from project and moved to business inventory",status:"pending",reimbursement_type:"We Owe",trigger_event:"Inventory sale",item_ids:[a],created_by:"system",created_at:new Date().toISOString(),last_updated:new Date().toISOString()},i=p(d,"transactions",r);await N(i,s,{merge:!0}),await this.updateItem(a,{project_id:null,inventory_status:"available",transaction_id:r,disposition:"inventory"}),console.log("✅ New return completed: Inventory → Sale");try{await w.logAllocationEvent("return",a,null,r,{action:"return_completed",scenario:"new_return",from_status:"inventory",to_transaction:r,amount:n})}catch(c){console.warn("⚠️ Failed to log return completion:",c)}return r},async completePendingTransaction(a,t,n){await A();const e=a==="sale"?`INV_SALE_${t}`:`INV_PURCHASE_${t}`,o=p(d,"transactions",e),r=await T(o);if(!r.exists())throw new Error("Transaction not found");const i=r.data().item_ids||[];await R(o,{status:"completed",payment_method:n,transaction_date:x(new Date),last_updated:new Date().toISOString()});const c=q(d);for(const _ of i){const l=p(d,"items",_);a==="sale"?c.update(l,{transaction_id:null,inventory_status:"sold",last_updated:new Date().toISOString()}):c.update(l,{project_id:null,transaction_id:null,inventory_status:"available",last_updated:new Date().toISOString()})}await c.commit()},async getItemById(a){await A();const t=p(d,"items",a),n=await T(t);return n.exists()?{item_id:n.id,...n.data()}:null},async duplicateItem(a,t){const n=await this.getItemById(t);if(!n)throw new Error("Original item not found");const e=new Date,o=`I-${Date.now()}-${Math.random().toString(36).substr(2,4)}`,r=`QR-${Date.now()}-${Math.random().toString(36).substr(2,4)}`,s={item_id:o,description:n.description,source:n.source,sku:n.sku||"",purchase_price:n.purchase_price||"",project_price:n.project_price||"",market_value:n.market_value||"",payment_method:n.payment_method,disposition:"keep",notes:n.notes,space:n.space||"",qr_key:r,bookmark:!1,transaction_id:n.transaction_id,project_id:a,date_created:e.toISOString(),last_updated:e.toISOString(),images:n.images||[]};Object.keys(s).forEach(c=>{s[c]===void 0&&delete s[c]});const i=p(d,"items",o);return await N(i,s),o},async createTransactionItems(a,t,n,e,o,r){const s=q(d),i=[],c=new Date;let _;try{if(r==null&&t){const l=p(d,"transactions",t),m=await T(l);if(m.exists()){const v=m.data();v.tax_rate_pct!==void 0&&v.tax_rate_pct!==null&&(_=v.tax_rate_pct)}}}catch{}for(const l of o){const m=`I-${Date.now()}-${Math.random().toString(36).substr(2,4)}`;i.push(m);const v=p(d,"items",m),k=`QR-${Date.now()}-${Math.random().toString(36).substr(2,4)}`,f={item_id:m,description:l.description,source:e,sku:l.sku||"",purchase_price:l.purchase_price,project_price:l.project_price,market_value:l.market_value||"",payment_method:"Client Card",disposition:"keep",notes:l.notes,qr_key:k,bookmark:!1,transaction_id:t,project_id:a,date_created:n,last_updated:c.toISOString(),images:[]};r!=null?f.tax_rate_pct=r:_!==void 0&&(f.tax_rate_pct=_);const h=f;s.set(v,h)}return await s.commit(),i}},z={async getBusinessInventoryItems(a,t){const n=g(d,"business_inventory");let e=u(n);a!=null&&a.status&&(e=u(e,y("inventory_status","==",a.status))),e=u(e,b("last_updated","desc")),t&&(e=u(e,F(t.limit)),t.page>0&&(e=u(e,F(t.page*t.limit))));let r=(await S(e)).docs.map(s=>({item_id:s.id,...s.data()}));if(a!=null&&a.searchQuery){const s=a.searchQuery.toLowerCase();r=r.filter(i=>{var c;return i.description.toLowerCase().includes(s)||i.source.toLowerCase().includes(s)||i.sku.toLowerCase().includes(s)||((c=i.business_inventory_location)==null?void 0:c.toLowerCase().includes(s))})}return r},async getBusinessInventoryItem(a){const t=p(d,"business_inventory",a),n=await T(t);return n.exists()?{item_id:n.id,...n.data()}:null},async duplicateBusinessInventoryItem(a){const t=await this.getBusinessInventoryItem(a);if(!t)throw new Error("Original business inventory item not found");const n=new Date,e=`BI-${Date.now()}-${Math.random().toString(36).substr(2,4)}`,o=`QR-${Date.now()}-${Math.random().toString(36).substr(2,4)}`,r={item_id:e,description:t.description,source:t.source,sku:t.sku||"",purchase_price:t.purchase_price||"",project_price:t.project_price||"",market_value:t.market_value||"",payment_method:t.payment_method,disposition:"keep",notes:t.notes,space:t.space||"",qr_key:o,bookmark:!1,inventory_status:"available",business_inventory_location:t.business_inventory_location||"",transaction_id:t.transaction_id,date_created:n.toISOString(),last_updated:n.toISOString(),images:t.images||[]};Object.keys(r).forEach(i=>{r[i]===void 0&&delete r[i]});const s=p(d,"business_inventory",e);return await N(s,r),e},async createBusinessInventoryItem(a){const t=g(d,"business_inventory"),n=new Date,e={...a,inventory_status:a.inventory_status||"available",date_created:n.toISOString(),last_updated:n.toISOString()};return(await E(t,e)).id},async updateBusinessInventoryItem(a,t){const n=p(d,"business_inventory",a),e={last_updated:new Date().toISOString()};t.inventory_status!==void 0&&(e.inventory_status=t.inventory_status),t.business_inventory_location!==void 0&&(e.business_inventory_location=t.business_inventory_location),t.purchase_price!==void 0&&(e.purchase_price=t.purchase_price),t.project_price!==void 0&&(e.project_price=t.project_price),t.description!==void 0&&(e.description=t.description),t.source!==void 0&&(e.source=t.source),t.sku!==void 0&&(e.sku=t.sku),t.market_value!==void 0&&(e.market_value=t.market_value),t.payment_method!==void 0&&(e.payment_method=t.payment_method),t.disposition!==void 0&&(e.disposition=t.disposition),t.notes!==void 0&&(e.notes=t.notes),t.space!==void 0&&(e.space=t.space),t.bookmark!==void 0&&(e.bookmark=t.bookmark),t.images!==void 0&&(e.images=t.images),await R(n,e)},async deleteBusinessInventoryItem(a){const t=p(d,"business_inventory",a);await L(t)},async getBusinessInventoryStats(){const a=g(d,"business_inventory"),t=await W(a),n=u(a),e=await S(n);let o=0,r=0,s=0;return e.docs.forEach(i=>{switch(i.data().inventory_status){case"available":o++;break;case"allocated":r++;break;case"sold":s++;break}}),{totalItems:t.data().count,availableItems:o,allocatedItems:r,soldItems:s}},subscribeToBusinessInventory(a,t){const n=g(d,"business_inventory");let e=u(n,b("last_updated","desc"));return t!=null&&t.status&&(e=u(e,y("inventory_status","==",t.status))),O(e,o=>{let r=o.docs.map(s=>({item_id:s.id,...s.data()}));if(t!=null&&t.searchQuery){const s=t.searchQuery.toLowerCase();r=r.filter(i=>{var c;return i.description.toLowerCase().includes(s)||i.source.toLowerCase().includes(s)||i.sku.toLowerCase().includes(s)||((c=i.business_inventory_location)==null?void 0:c.toLowerCase().includes(s))})}a(r)})},async allocateItemToProject(a,t,n,e){const o=await this.getBusinessInventoryItem(a);if(!o)throw new Error("Business inventory item not found");const r=n||o.project_price||o.market_value||"0.00";let s="Project";try{const l=await C.getProject(t);s=(l==null?void 0:l.name)||"Project"}catch(l){console.warn("Could not fetch project name for transaction notes:",l)}const i={project_id:t,transaction_date:x(new Date),source:"Inventory",transaction_type:"Purchase",payment_method:"Pending",amount:r,budget_category:"Furnishings",notes:e||`${s} inventory purchase`,created_by:"system",status:"pending",reimbursement_type:"Client Owes",trigger_event:"Inventory allocation"},c=g(d,"projects",t,"transactions"),_=await E(c,i);return await this.updateBusinessInventoryItem(a,{inventory_status:"allocated",transaction_id:_.id}),_.id},async batchAllocateItemsToProject(a,t,n={}){const e=q(d),o=[],r=new Date,s=g(d,"business_inventory"),i=u(s,y("__name__","in",a)),c=await S(i);if(c.empty)throw new Error("No business inventory items found");let _="Project";try{const h=await C.getProject(t);_=(h==null?void 0:h.name)||"Project"}catch(h){console.warn("Could not fetch project name for transaction notes:",h)}const l={project_id:t,transaction_date:x(r),source:"Inventory",transaction_type:"Purchase",payment_method:"Pending",amount:n.amount||"0.00",budget_category:"Furnishings",notes:n.notes||`${_} inventory purchase`,created_by:"system",status:"pending",reimbursement_type:"Client Owes",trigger_event:"Inventory allocation"},m=g(d,"projects",t,"transactions"),v=p(m);e.set(v,l),o.push(v.id),c.docs.forEach(h=>{const I=h.data(),j=`I-${Date.now()}-${Math.random().toString(36).substr(2,4)}`,B=p(d,"projects",t,"items",j),H={item_id:j,description:I.description,source:I.source,sku:I.sku,project_price:I.project_price,market_value:I.market_value||"",payment_method:"1584",disposition:"keep",notes:I.notes,space:n.space||"",qr_key:`QR-${Date.now()}-${Math.random().toString(36).substr(2,4)}`,bookmark:!1,transaction_id:v.id,project_id:t,date_created:I.date_created,last_updated:r.toISOString(),images:I.images||[]};e.set(B,H)}),a.forEach(h=>{const I=p(d,"business_inventory",h);e.update(I,{inventory_status:"sold",transaction_id:v.id,last_updated:r.toISOString()})}),await e.commit();const f=(await P.getItemsByProject(t)).length;return await C.updateProject(t,{metadata:{totalItems:f,lastActivity:r}}),o},async returnItemFromProject(a,t,n){const e=p(d,"projects",n,"transactions",t);await R(e,{status:"canceled",last_updated:new Date().toISOString()}),await this.updateBusinessInventoryItem(a,{inventory_status:"available",transaction_id:void 0})},async markItemAsSold(a,t,n,e){const o=p(d,"projects",n,"transactions",t);await R(o,{status:"completed",transaction_date:x(new Date),payment_method:e,last_updated:new Date().toISOString()}),await this.updateBusinessInventoryItem(a,{inventory_status:"sold",transaction_id:void 0})},async moveItemToBusinessInventory(a,t,n,e){const o=g(d,"projects",t,"items"),r=u(o,y("item_id","==",a)),s=await S(r);if(s.empty)throw new Error("Item not found in project");const i=s.docs[0].data(),c={project_id:t,transaction_date:x(new Date),source:"Client Purchase",transaction_type:"Purchase",payment_method:"Pending",amount:n,budget_category:"Furnishings",notes:e||"Client-purchased item moved to business inventory",created_by:"system",status:"pending",reimbursement_type:"We Owe",trigger_event:"Purchase from client"},_=g(d,"projects",t,"transactions"),l=await E(_,c),m={description:i.description,source:i.source,sku:i.sku,price:i.price,market_value:i.market_value,payment_method:i.payment_method,disposition:i.disposition||"keep",notes:i.notes,space:i.space,qr_key:i.qr_key,bookmark:i.bookmark||!1,inventory_status:"available",business_inventory_location:"Warehouse - Client Purchase",transaction_id:l.id,images:i.images||[]};return await this.createBusinessInventoryItem(m),await L(s.docs[0].ref),l.id}},M={async handleInventoryDesignation(a,t,n){if(console.log("🔄 handleInventoryDesignation called:",{itemId:a,projectId:t,disposition:n}),n!=="inventory"){console.log("⏭️ Skipping - disposition is not inventory:",n);return}try{console.log("🔍 Getting item details for:",a);const e=await P.getItemById(a);if(!e)throw new Error("Item not found");if(console.log("✅ Item found:",e.item_id,"disposition:",e.disposition,"project_id:",e.project_id),e.transaction_id&&e.transaction_id.startsWith("INV_PURCHASE_")&&e.transaction_id.replace("INV_PURCHASE_","")===t){console.log("🔁 Detected purchase-reversion: removing from INV_PURCHASE and returning to inventory"),await P.removeItemFromTransaction(e.item_id,e.transaction_id,e.project_price||e.market_value||"0.00"),await P.updateItem(e.item_id,{project_id:null,inventory_status:"available",transaction_id:null,last_updated:new Date().toISOString()});try{await w.logAllocationEvent("deallocation",a,null,e.transaction_id,{action:"deallocation_completed",scenario:"purchase_reversion",from_transaction:e.transaction_id,to_status:"inventory",amount:e.project_price||e.market_value||"0.00"})}catch(s){console.warn("⚠️ Failed to log deallocation completion for purchase-reversion:",s)}console.log("✅ Purchase-reversion handled: item returned to inventory without creating INV_SALE");return}console.log("🏦 Creating/updating Sale transaction for inventory designation");try{await w.logAllocationEvent("deallocation",a,e.project_id,e.transaction_id,{action:"deallocation_started",target_status:"inventory",current_transaction_id:e.transaction_id})}catch(r){console.warn("⚠️ Failed to log deallocation start:",r)}const o=await this.ensureSaleTransaction(e,t,"Transaction for items purchased from project and moved to business inventory");console.log("📦 Moving item to business inventory..."),await P.updateItem(e.item_id,{project_id:null,inventory_status:"available",transaction_id:o,space:"",last_updated:new Date().toISOString()});try{await w.logAllocationEvent("deallocation",a,null,o,{action:"deallocation_completed",from_project_id:e.project_id,to_transaction:o,amount:e.project_price||e.market_value||"0.00"})}catch(r){console.warn("⚠️ Failed to log deallocation completion:",r)}console.log("✅ Item moved to business inventory successfully"),console.log("✅ Deallocation completed successfully")}catch(e){throw console.error("❌ Error handling inventory designation:",e),e}},async ensureSaleTransaction(a,t,n){console.log("🏦 Creating/updating sale transaction for item:",a.item_id);let e="Other";try{const i=await C.getProject(t);e=(i==null?void 0:i.name)||"Other"}catch(i){console.warn("Could not fetch project name for transaction source:",i)}if(a.transaction_id&&a.transaction_id.startsWith("INV_PURCHASE_")&&a.transaction_id.replace("INV_PURCHASE_","")===t)return console.log("ℹ️ ensureSaleTransaction detected existing INV_PURCHASE for same project; performing purchase-reversion instead of creating INV_SALE"),await P.removeItemFromTransaction(a.item_id,a.transaction_id,a.project_price||a.market_value||"0.00"),await P.updateItem(a.item_id,{project_id:null,inventory_status:"available",transaction_id:null,last_updated:new Date().toISOString()}),null;const o=`INV_SALE_${t}`;console.log("🔑 Canonical transaction ID:",o);const r=p(d,"transactions",o),s=await T(r);if(s.exists()){console.log("📋 Existing INV_SALE transaction found, updating with new item");const i=s.data(),c=i.item_ids||[],_=[...new Set([...c,a.item_id])],l=g(d,"items"),m=u(l,y("__name__","in",_)),k=(await S(m)).docs.map(h=>h.data().project_price||h.data().market_value||"0.00").reduce((h,I)=>h+parseFloat(I||"0"),0).toFixed(2),f={...i,item_ids:_,amount:k,notes:n||"Transaction for items purchased from project and moved to business inventory",last_updated:new Date().toISOString()};await N(r,f,{merge:!0}),console.log("🔄 Updated INV_SALE transaction with",_.length,"items, amount:",k)}else{const i=a.project_price||a.market_value||"0.00",c={project_id:t,project_name:null,transaction_date:x(new Date),source:e,transaction_type:"To Inventory",payment_method:"Pending",amount:parseFloat(i).toFixed(2),budget_category:"Furnishings",notes:n||"Transaction for items purchased from project and moved to business inventory",status:"pending",reimbursement_type:"We Owe",trigger_event:"Inventory sale",item_ids:[a.item_id],created_by:"system",created_at:new Date().toISOString(),last_updated:new Date().toISOString()};console.log("🆕 Creating new INV_SALE transaction with amount:",c.amount),await N(r,c,{merge:!0})}return console.log("✅ Sale transaction created/updated successfully"),o}},G={async allocateBusinessInventoryToProject(a,t,n,e){return await P.allocateItemToProject(a,t,n,e)},async returnItemToBusinessInventory(a,t,n){await P.returnItemFromProject(a,n)},async completePendingTransaction(a,t,n,e){return await P.completePendingTransaction("sale",n,e)},async handleItemDeallocation(a,t,n){return await M.handleInventoryDesignation(a,t,n)}},tt=Object.freeze(Object.defineProperty({__proto__:null,auditService:w,businessInventoryService:z,deallocationService:M,integrationService:G,projectService:C,transactionService:K,unifiedItemsService:P},Symbol.toStringTag,{value:"Module"}));export{Z as a,x as b,z as c,tt as d,J as f,G as i,C as p,K as t,P as u};
//# sourceMappingURL=inventoryService.js.map
