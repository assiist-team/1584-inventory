{"version":3,"file":"EditTransaction.js","sources":["../../src/pages/EditTransaction.tsx"],"sourcesContent":["import { ArrowLeft, Save, X } from 'lucide-react'\nimport { Link, useParams, useNavigate } from 'react-router-dom'\nimport { useState, useEffect, FormEvent } from 'react'\nimport { TransactionFormData, TransactionValidationErrors, TransactionImage, TransactionItemFormData, ItemImage } from '@/types'\nimport { TRANSACTION_SOURCES } from '@/constants/transactionSources'\nimport { transactionService, projectService, itemService } from '@/services/inventoryService'\nimport { ImageUploadService, UploadProgress } from '@/services/imageService'\nimport ImageUpload from '@/components/ui/ImageUpload'\nimport TransactionItemsList from '@/components/TransactionItemsList'\nimport { useAuth } from '../contexts/AuthContext'\nimport { UserRole } from '../types'\nimport { Shield } from 'lucide-react'\n\nexport default function EditTransaction() {\n  const { id: projectId, transactionId } = useParams<{ id: string; transactionId: string }>()\n  const navigate = useNavigate()\n  const { hasRole } = useAuth()\n\n  // Check if user has permission to edit transactions (DESIGNER role or higher)\n  if (!hasRole(UserRole.DESIGNER)) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"max-w-md w-full space-y-8 text-center\">\n          <div className=\"mx-auto h-12 w-12 flex items-center justify-center rounded-full bg-red-100\">\n            <Shield className=\"h-6 w-6 text-red-600\" />\n          </div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Access Denied</h2>\n          <p className=\"text-gray-600\">\n            You don't have permission to edit transactions. Please contact an administrator if you need access.\n          </p>\n          <Link\n            to={`/project/${projectId}`}\n            className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700\"\n          >\n            Back to Project\n          </Link>\n        </div>\n      </div>\n    )\n  }\n\n  const [projectName, setProjectName] = useState<string>('')\n\n  const [formData, setFormData] = useState<TransactionFormData>({\n    transaction_date: '',\n    source: '',\n    transaction_type: 'Purchase',\n    payment_method: '',\n    amount: '',\n    budget_category: 'Furnishings',\n    notes: '',\n    transaction_images: [],\n    receipt_emailed: false\n  })\n\n  const [errors, setErrors] = useState<TransactionValidationErrors>({})\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [isLoading, setIsLoading] = useState(true)\n  const [isUploadingImages, setIsUploadingImages] = useState(false)\n  const [existingTransactionImages, setExistingTransactionImages] = useState<TransactionImage[]>([])\n\n  // Transaction items state\n  const [items, setItems] = useState<TransactionItemFormData[]>([])\n  const [imageFilesMap, setImageFilesMap] = useState<Map<string, File[]>>(new Map())\n\n  // Custom source state\n  const [isCustomSource, setIsCustomSource] = useState(false)\n\n  // Load transaction and project data\n  useEffect(() => {\n    const loadTransaction = async () => {\n      if (!projectId || !transactionId) return\n\n      try {\n        const [transaction, project] = await Promise.all([\n          transactionService.getTransaction(projectId, transactionId),\n          projectService.getProject(projectId)\n        ])\n\n        if (project) {\n          setProjectName(project.name)\n        }\n        if (transaction) {\n          // Check if source is custom (not in predefined list)\n          const sourceIsCustom = Boolean(transaction.source && !TRANSACTION_SOURCES.includes(transaction.source as any))\n\n          // Use the transaction date directly for date input\n          setFormData({\n            transaction_date: transaction.transaction_date || '',\n            source: transaction.source,\n            transaction_type: transaction.transaction_type,\n            payment_method: transaction.payment_method,\n            amount: transaction.amount,\n            budget_category: transaction.budget_category || 'Furnishings',\n            notes: transaction.notes || '',\n            transaction_images: [],\n            receipt_emailed: transaction.receipt_emailed\n          })\n\n          setIsCustomSource(sourceIsCustom)\n          const images = transaction.transaction_images || []\n          setExistingTransactionImages(Array.isArray(images) ? images : [])\n\n          // Load transaction items\n          try {\n            const transactionItemIds = await itemService.getTransactionItems(projectId, transactionId)\n            console.log('Loaded transaction item IDs:', transactionItemIds)\n\n            const transactionItems = await Promise.all(\n              transactionItemIds.map(async (itemId) => {\n                const item = await itemService.getItem(projectId, itemId)\n                console.log(`Loaded item ${itemId}:`, {\n                  id: itemId,\n                  description: item?.description || '',\n                  hasValidFormat: itemId.startsWith('I-') && itemId.length > 10\n                })\n\n                return {\n                  id: itemId,\n                  description: item?.description || '',\n                  price: item?.price?.toString() || '',\n                  sku: item?.sku || '',\n                  market_value: item?.market_value?.toString() || '',\n                  notes: item?.notes || '',\n                  imageFiles: [],\n                  images: item?.images || []\n                }\n              })\n            )\n            console.log('Loaded transaction items:', transactionItems.map(item => ({\n              id: item.id,\n              description: item.description,\n              isTempId: item.id.startsWith('temp-')\n            })))\n            setItems(transactionItems)\n          } catch (itemError) {\n            console.error('Error loading transaction items:', itemError)\n          }\n        }\n      } catch (error) {\n        console.error('Error loading transaction:', error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    loadTransaction()\n  }, [projectId, transactionId])\n\n  // Validation function\n  const validateForm = (): boolean => {\n    const newErrors: TransactionValidationErrors = {}\n\n    if (!formData.source.trim()) {\n      newErrors.source = 'Source is required'\n    }\n\n    if (!formData.transaction_type.trim()) {\n      newErrors.transaction_type = 'Transaction type is required'\n    }\n\n    if (!formData.payment_method.trim()) {\n      newErrors.payment_method = 'Payment method is required'\n    }\n\n    if (!formData.budget_category?.trim()) {\n      newErrors.budget_category = 'Budget category is required'\n    }\n\n    if (!formData.amount.trim()) {\n      newErrors.amount = 'Amount is required'\n    } else if (isNaN(Number(formData.amount)) || Number(formData.amount) <= 0) {\n      newErrors.amount = 'Amount must be a positive number'\n    }\n\n    if (!formData.transaction_date) {\n      newErrors.transaction_date = 'Transaction date is required'\n    }\n\n    setErrors(newErrors)\n    return Object.keys(newErrors).length === 0\n  }\n\n  const handleSubmit = async (e: FormEvent) => {\n    e.preventDefault()\n\n    if (!validateForm() || !projectId || !transactionId) return\n\n    setIsSubmitting(true)\n\n    try {\n      // First, handle item updates and creations\n      if (items.length > 0) {\n        // Debug: Log all items to understand the issue\n        console.log('All items before processing:', items.map(item => ({\n          id: item.id,\n          description: item.description,\n          price: item.price,\n          sku: item.sku,\n          isTempId: item.id.startsWith('temp-'),\n          idFormat: item.id.startsWith('I-') ? 'database' : item.id.startsWith('temp-') ? 'temp' : 'unknown'\n        })))\n        // Separate existing items from new items using robust classification\n        // Existing items have real database IDs (format: \"I-\" prefix followed by timestamp and random string)\n        // New items have temporary IDs (format: \"temp-\" prefix followed by timestamp and random string)\n        const existingItems: TransactionItemFormData[] = []\n        const newItems: TransactionItemFormData[] = []\n\n        items.forEach(item => {\n          // Robust classification logic\n          if (item.id.startsWith('temp-')) {\n            // Definitely a temp item\n            newItems.push(item)\n          } else if (item.id.startsWith('I-') && item.id.length > 10) {\n            // Likely a real database item (format: I-timestamp-randomstring)\n            existingItems.push(item)\n          } else if (item.id.length > 5 && !item.id.includes('_')) {\n            // Could be a real database item with different format, treat as existing for safety\n            console.warn(`Item with ambiguous ID treated as existing: ${item.id} - ${item.description}`)\n            existingItems.push(item)\n          } else {\n            // Default to treating as new item if ID format is unclear\n            console.warn(`Item with unclear ID format treated as new: ${item.id} - ${item.description}`)\n            newItems.push(item)\n          }\n        })\n\n        console.log(`Separated ${existingItems.length} existing items and ${newItems.length} new items`)\n\n        // Update existing items (classification is now robust, so no additional safety checks needed)\n        for (const item of existingItems) {\n          await itemService.updateItem(projectId, item.id, {\n            description: item.description,\n            price: item.price,\n            sku: item.sku,\n            market_value: item.market_value,\n            notes: item.notes,\n            transaction_id: transactionId\n          })\n        }\n\n        // Create new items using the same batch infrastructure as new transactions\n        let createdItemIds: string[] = []\n        if (newItems.length > 0) {\n          createdItemIds = await itemService.createTransactionItems(\n            projectId,\n            transactionId,\n            formData.transaction_date,\n            formData.source,\n            newItems\n          )\n          console.log('Created new items:', createdItemIds)\n\n          // Update the item IDs in our local state (map temp IDs to real IDs)\n          setItems(prevItems => prevItems.map(prevItem => {\n            // Only update items that were in our newItems array (have temp IDs)\n            const newItemIndex = newItems.findIndex(item => item.id === prevItem.id)\n            if (newItemIndex >= 0 && newItemIndex < createdItemIds.length) {\n              return { ...prevItem, id: createdItemIds[newItemIndex] }\n            }\n            return prevItem\n          }))\n        }\n\n        // Upload item images for newly created items\n        if (imageFilesMap.size > 0 && newItems.length > 0) {\n          try {\n            console.log('Starting item image upload process for new items...')\n\n            // Get the updated item list with real IDs\n            const updatedItems = await itemService.getTransactionItems(projectId, transactionId)\n            console.log('Updated item IDs after creation:', updatedItems)\n\n            // Upload images for each new item that has image files\n            for (let i = 0; i < newItems.length && i < createdItemIds.length; i++) {\n              const tempItem = newItems[i]\n              const realItemId = createdItemIds[i] // Use the IDs returned from batch creation\n              const imageFiles = imageFilesMap.get(tempItem.id)\n\n              if (imageFiles && imageFiles.length > 0) {\n                console.log(`Uploading ${imageFiles.length} images for new item ${realItemId}`)\n\n                // Upload each image file with the real item ID\n                const uploadPromises = imageFiles.map(async (file, fileIndex) => {\n                  try {\n                    console.log(`Uploading file ${fileIndex + 1}/${imageFiles.length}: ${file.name}`)\n                    const uploadResult = await ImageUploadService.uploadItemImage(\n                      file,\n                      projectName,\n                      realItemId\n                    )\n                    console.log(`Upload successful for ${file.name}:`, uploadResult)\n\n                    const uploadedImage: ItemImage = {\n                      url: uploadResult.url,\n                      alt: file.name,\n                      isPrimary: false, // For now, make all uploaded images non-primary\n                      uploadedAt: new Date(),\n                      fileName: file.name,\n                      size: file.size,\n                      mimeType: file.type\n                    }\n                    return uploadedImage\n                  } catch (uploadError) {\n                    console.error(`Failed to upload ${file.name}:`, uploadError)\n                    return null\n                  }\n                })\n\n                const uploadedImages = await Promise.all(uploadPromises)\n                const validImages = uploadedImages.filter(img => img !== null) as ItemImage[]\n\n                if (validImages.length > 0) {\n                  // Update the item with the uploaded images\n                  await itemService.updateItemImages(projectId, realItemId, validImages)\n                  console.log(`Successfully updated new item ${realItemId} with ${validImages.length} images`)\n                }\n              }\n            }\n          } catch (imageError) {\n            console.error('Error in item image upload process:', imageError)\n            // Don't fail the transaction if image upload fails - just log the error\n          }\n        }\n      }\n\n      // Upload transaction images\n      let transactionImages: TransactionImage[] = [...existingTransactionImages]\n      if (formData.transaction_images && formData.transaction_images.length > 0) {\n        setIsUploadingImages(true)\n\n        try {\n          const uploadResults = await ImageUploadService.uploadMultipleTransactionImages(\n            formData.transaction_images,\n            projectName,\n            transactionId,\n            handleImageUploadProgress\n          )\n\n          // Convert to TransactionImage format and combine with existing images\n          const newTransactionImages = ImageUploadService.convertFilesToTransactionImages(uploadResults)\n          transactionImages = [...existingTransactionImages, ...newTransactionImages]\n        } catch (error) {\n          console.error('Error uploading images:', error)\n          setErrors({ transaction_images: 'Failed to upload transaction images. Please try again.' })\n          setIsSubmitting(false)\n          setIsUploadingImages(false)\n          return\n        }\n\n        setIsUploadingImages(false)\n      } else {\n        // Use existing images if no new ones uploaded\n        transactionImages = existingTransactionImages\n      }\n\n      // Update transaction with new data and images\n      const updateData = {\n        ...formData,\n        transaction_images: transactionImages\n      }\n\n      await transactionService.updateTransaction(projectId, transactionId, updateData)\n      navigate(`/project/${projectId}?tab=transactions`)\n    } catch (error) {\n      console.error('Error updating transaction:', error)\n      // Set a general error message instead of targeting specific fields\n      setErrors({ general: error instanceof Error ? error.message : 'Failed to update transaction. Please try again.' })\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const handleInputChange = (field: keyof TransactionFormData, value: string | boolean | File[]) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }))\n    }\n  }\n\n  const handleImagesChange = (files: File[]) => {\n    setFormData(prev => ({ ...prev, transaction_images: files }))\n    // Clear any existing image errors\n    if (errors.transaction_images) {\n      setErrors(prev => ({ ...prev, transaction_images: undefined }))\n    }\n  }\n\n  const handleImageUploadProgress = (fileIndex: number, progress: UploadProgress) => {\n    // Progress tracking removed to fix TypeScript errors\n    console.log(`Upload progress for file ${fileIndex}: ${progress.percentage}%`)\n  }\n\n  const handleImageFilesChange = (itemId: string, imageFiles: File[]) => {\n    // Update the imageFilesMap\n    setImageFilesMap(prev => {\n      const newMap = new Map(prev)\n      newMap.set(itemId, imageFiles)\n      return newMap\n    })\n\n    // Also update the item in the items array with the imageFiles\n    setItems(prevItems => prevItems.map(item =>\n      item.id === itemId\n        ? { ...item, imageFiles }\n        : item\n    ))\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto\"></div>\n          <p className=\"mt-2 text-sm text-gray-600\">Loading transaction...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"space-y-4\">\n        {/* Back button row */}\n        <div className=\"flex items-center justify-between\">\n          <Link\n            to={`/project/${projectId}?tab=transactions`}\n            className=\"inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-700\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-1\" />\n            Back\n          </Link>\n        </div>\n\n      </div>\n\n      {/* Form */}\n      <div className=\"bg-white shadow rounded-lg\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Edit Transaction</h1>\n        </div>\n        <form onSubmit={handleSubmit} className=\"space-y-6 p-6\">\n          {/* General Error Display */}\n          {errors.general && (\n            <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n              <div className=\"flex\">\n                <div className=\"ml-3\">\n                  <h3 className=\"text-sm font-medium text-red-800\">Error</h3>\n                  <div className=\"mt-2 text-sm text-red-700\">\n                    <p>{errors.general}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Transaction Date */}\n          <div>\n            <label htmlFor=\"transaction_date\" className=\"block text-sm font-medium text-gray-700\">\n              Transaction Date *\n            </label>\n            <input\n              type=\"date\"\n              id=\"transaction_date\"\n              value={formData.transaction_date}\n              onChange={(e) => {\n                // Use the date value directly (YYYY-MM-DD format)\n                handleInputChange('transaction_date', e.target.value)\n              }}\n              className={`mt-1 block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 ${\n                errors.transaction_date ? 'border-red-300' : 'border-gray-300'\n              }`}\n            />\n            {errors.transaction_date && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.transaction_date}</p>\n            )}\n          </div>\n\n          {/* Source */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Source/Vendor *\n            </label>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 mb-3\">\n              {TRANSACTION_SOURCES.map((source) => (\n                <div key={source} className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    id={`source_${source.toLowerCase().replace(/\\s+/g, '_')}`}\n                    name=\"source\"\n                    value={source}\n                    checked={formData.source === source}\n                    onChange={(e) => {\n                      handleInputChange('source', e.target.value)\n                      setIsCustomSource(false)\n                    }}\n                    className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                  />\n                  <label htmlFor={`source_${source.toLowerCase().replace(/\\s+/g, '_')}`} className=\"ml-2 block text-sm text-gray-900\">\n                    {source}\n                  </label>\n                </div>\n              ))}\n            </div>\n            <div className=\"flex items-center\">\n              <input\n                type=\"radio\"\n                id=\"source_custom\"\n                name=\"source\"\n                value=\"custom\"\n                checked={isCustomSource}\n                onChange={() => {\n                  setIsCustomSource(true)\n                  handleInputChange('source', '')\n                }}\n                className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n              />\n              <label htmlFor=\"source_custom\" className=\"ml-2 block text-sm text-gray-900\">\n                Other\n              </label>\n            </div>\n            {isCustomSource && (\n              <input\n                type=\"text\"\n                id=\"source_custom_input\"\n                value={formData.source}\n                onChange={(e) => handleInputChange('source', e.target.value)}\n                placeholder=\"Enter custom source...\"\n                className={`mt-3 block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 ${\n                  errors.source ? 'border-red-300' : 'border-gray-300'\n                }`}\n              />\n            )}\n            {errors.source && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.source}</p>\n            )}\n          </div>\n\n          {/* Transaction Type */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Transaction Type *\n            </label>\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"type_purchase\"\n                  name=\"transaction_type\"\n                  value=\"Purchase\"\n                  checked={formData.transaction_type === 'Purchase'}\n                  onChange={(e) => handleInputChange('transaction_type', e.target.value)}\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                />\n                <label htmlFor=\"type_purchase\" className=\"ml-2 block text-sm text-gray-900\">\n                  Purchase\n                </label>\n              </div>\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"type_return\"\n                  name=\"transaction_type\"\n                  value=\"Return\"\n                  checked={formData.transaction_type === 'Return'}\n                  onChange={(e) => handleInputChange('transaction_type', e.target.value)}\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                />\n                <label htmlFor=\"type_return\" className=\"ml-2 block text-sm text-gray-900\">\n                  Return\n                </label>\n              </div>\n            </div>\n            {errors.transaction_type && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.transaction_type}</p>\n            )}\n          </div>\n\n          {/* Amount */}\n          <div>\n            <label htmlFor=\"amount\" className=\"block text-sm font-medium text-gray-700\">\n              Amount *\n            </label>\n            <div className=\"mt-1 relative rounded-md shadow-sm\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <span className=\"text-gray-500 sm:text-sm\">$</span>\n              </div>\n              <input\n                type=\"text\"\n                id=\"amount\"\n                value={formData.amount}\n                onChange={(e) => handleInputChange('amount', e.target.value)}\n                placeholder=\"0.00\"\n                className={`block w-full pl-8 pr-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 ${\n                  errors.amount ? 'border-red-300' : 'border-gray-300'\n                }`}\n              />\n            </div>\n            {errors.amount && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.amount}</p>\n            )}\n          </div>\n\n          {/* Transaction Method */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Transaction Method *\n            </label>\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"method_client_card\"\n                  name=\"payment_method\"\n                  value=\"Client Card\"\n                  checked={formData.payment_method === 'Client Card'}\n                  onChange={(e) => handleInputChange('payment_method', e.target.value)}\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                />\n                <label htmlFor=\"method_client_card\" className=\"ml-2 block text-sm text-gray-900\">\n                  Client Card\n                </label>\n              </div>\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"method_1584_card\"\n                  name=\"payment_method\"\n                  value=\"1584 Design\"\n                  checked={formData.payment_method === '1584 Design'}\n                  onChange={(e) => handleInputChange('payment_method', e.target.value)}\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                />\n                <label htmlFor=\"method_1584_card\" className=\"ml-2 block text-sm text-gray-900\">\n                  1584 Design\n                </label>\n              </div>\n            </div>\n            {errors.payment_method && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.payment_method}</p>\n            )}\n          </div>\n\n          {/* Budget Category */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Budget Category *\n            </label>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"budget_design_fee\"\n                  name=\"budget_category\"\n                  value=\"Design Fee\"\n                  checked={formData.budget_category === 'Design Fee'}\n                  onChange={(e) => handleInputChange('budget_category', e.target.value)}\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                />\n                <label htmlFor=\"budget_design_fee\" className=\"ml-2 block text-sm text-gray-900\">\n                  Design Fee\n                </label>\n              </div>\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"budget_furnishings\"\n                  name=\"budget_category\"\n                  value=\"Furnishings\"\n                  checked={formData.budget_category === 'Furnishings'}\n                  onChange={(e) => handleInputChange('budget_category', e.target.value)}\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                />\n                <label htmlFor=\"budget_furnishings\" className=\"ml-2 block text-sm text-gray-900\">\n                  Furnishings\n                </label>\n              </div>\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"budget_property_management\"\n                  name=\"budget_category\"\n                  value=\"Property Management\"\n                  checked={formData.budget_category === 'Property Management'}\n                  onChange={(e) => handleInputChange('budget_category', e.target.value)}\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                />\n                <label htmlFor=\"budget_property_management\" className=\"ml-2 block text-sm text-gray-900\">\n                  Property Management\n                </label>\n              </div>\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"budget_kitchen\"\n                  name=\"budget_category\"\n                  value=\"Kitchen\"\n                  checked={formData.budget_category === 'Kitchen'}\n                  onChange={(e) => handleInputChange('budget_category', e.target.value)}\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                />\n                <label htmlFor=\"budget_kitchen\" className=\"ml-2 block text-sm text-gray-900\">\n                  Kitchen\n                </label>\n              </div>\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"budget_install\"\n                  name=\"budget_category\"\n                  value=\"Install\"\n                  checked={formData.budget_category === 'Install'}\n                  onChange={(e) => handleInputChange('budget_category', e.target.value)}\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                />\n                <label htmlFor=\"budget_install\" className=\"ml-2 block text-sm text-gray-900\">\n                  Install\n                </label>\n              </div>\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"budget_storage_receiving\"\n                  name=\"budget_category\"\n                  value=\"Storage & Receiving\"\n                  checked={formData.budget_category === 'Storage & Receiving'}\n                  onChange={(e) => handleInputChange('budget_category', e.target.value)}\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                />\n                <label htmlFor=\"budget_storage_receiving\" className=\"ml-2 block text-sm text-gray-900\">\n                  Storage & Receiving\n                </label>\n              </div>\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"budget_fuel\"\n                  name=\"budget_category\"\n                  value=\"Fuel\"\n                  checked={formData.budget_category === 'Fuel'}\n                  onChange={(e) => handleInputChange('budget_category', e.target.value)}\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                />\n                <label htmlFor=\"budget_fuel\" className=\"ml-2 block text-sm text-gray-900\">\n                  Fuel\n                </label>\n              </div>\n            </div>\n            {errors.budget_category && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.budget_category}</p>\n            )}\n          </div>\n\n\n          {/* Receipt Email Copy */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Receipt Email Copy\n            </label>\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"receipt_yes\"\n                  name=\"receipt_emailed\"\n                  checked={formData.receipt_emailed === true}\n                  onChange={() => handleInputChange('receipt_emailed', true)}\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                />\n                <label htmlFor=\"receipt_yes\" className=\"ml-2 block text-sm text-gray-900\">\n                  Yes\n                </label>\n              </div>\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"receipt_no\"\n                  name=\"receipt_emailed\"\n                  checked={formData.receipt_emailed === false}\n                  onChange={() => handleInputChange('receipt_emailed', false)}\n                  className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                />\n                <label htmlFor=\"receipt_no\" className=\"ml-2 block text-sm text-gray-900\">\n                  No\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {/* Notes */}\n          <div>\n            <label htmlFor=\"notes\" className=\"block text-sm font-medium text-gray-700\">\n              Notes\n            </label>\n            <textarea\n              id=\"notes\"\n              rows={3}\n              value={formData.notes}\n              onChange={(e) => handleInputChange('notes', e.target.value)}\n              placeholder=\"Additional notes about this transaction...\"\n              className={`mt-1 block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 ${\n                errors.notes ? 'border-red-300' : 'border-gray-300'\n              }`}\n            />\n            {errors.notes && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.notes}</p>\n            )}\n          </div>\n\n          {/* Transaction Items */}\n          <div>\n            <TransactionItemsList\n              items={items}\n              onItemsChange={(newItems) => {\n                setItems(newItems)\n              }}\n              projectId={projectId}\n              projectName={projectName}\n              onImageFilesChange={handleImageFilesChange}\n            />\n          </div>\n\n          {/* Transaction Images */}\n          <div>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              Transaction Images\n            </h3>\n\n            {/* Existing Images */}\n            {existingTransactionImages.length > 0 && (\n              <div className=\"mb-4\">\n                <h4 className=\"text-xs font-medium text-gray-600 mb-2\">Current Images:</h4>\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 mb-4\">\n                  {existingTransactionImages.map((image, index) => (\n                    <div key={index} className=\"relative group\">\n                      <div className=\"aspect-w-4 aspect-h-3 rounded-lg overflow-hidden bg-gray-100\">\n                        <img\n                          src={image.url}\n                          alt={image.fileName}\n                          className=\"w-full h-full object-cover\"\n                        />\n                        <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all flex items-center justify-center\">\n                          <p className=\"text-white text-xs opacity-0 group-hover:opacity-100 text-center p-2\">\n                            {image.fileName}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* New Image Upload */}\n            <ImageUpload\n              onImagesChange={handleImagesChange}\n              maxImages={5}\n              maxFileSize={10}\n              disabled={isSubmitting || isUploadingImages}\n              className=\"mb-2\"\n            />\n            {errors.transaction_images && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.transaction_images}</p>\n            )}\n          </div>\n\n          {/* Form Actions */}\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Link\n              to={`/project/${projectId}?tab=transactions`}\n              className=\"inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\n            >\n              <X className=\"h-4 w-4 mr-2\" />\n              Cancel\n            </Link>\n            <button\n              type=\"submit\"\n              disabled={isSubmitting || isUploadingImages}\n              className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <Save className=\"h-4 w-4 mr-2\" />\n              {isSubmitting ? 'Updating...' : isUploadingImages ? 'Uploading Images...' : 'Update Transaction'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n"],"names":["EditTransaction","projectId","transactionId","useParams","navigate","useNavigate","hasRole","useAuth","UserRole","jsxs","jsx","Shield","Link","projectName","setProjectName","useState","formData","setFormData","errors","setErrors","isSubmitting","setIsSubmitting","isLoading","setIsLoading","isUploadingImages","setIsUploadingImages","existingTransactionImages","setExistingTransactionImages","items","setItems","imageFilesMap","setImageFilesMap","isCustomSource","setIsCustomSource","useEffect","transaction","project","transactionService","projectService","sourceIsCustom","TRANSACTION_SOURCES","images","transactionItemIds","itemService","transactionItems","itemId","item","_a","_b","itemError","error","validateForm","newErrors","handleSubmit","e","existingItems","newItems","createdItemIds","prevItems","prevItem","newItemIndex","updatedItems","i","tempItem","realItemId","imageFiles","uploadPromises","file","fileIndex","uploadResult","ImageUploadService","uploadError","validImages","img","imageError","transactionImages","uploadResults","handleImageUploadProgress","newTransactionImages","updateData","handleInputChange","field","value","prev","handleImagesChange","files","progress","handleImageFilesChange","newMap","ArrowLeft","source","TransactionItemsList","image","index","ImageUpload","X","Save"],"mappings":"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"}