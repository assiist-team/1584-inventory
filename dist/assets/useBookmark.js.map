{"version":3,"file":"useBookmark.js","sources":["../../src/hooks/useBookmark.ts"],"sourcesContent":["import { useCallback } from 'react'\nimport { BookmarkableItem } from '@/types'\n\ninterface UseBookmarkOptions<T extends BookmarkableItem> {\n  items: T[]\n  setItems: (items: T[] | ((prev: T[]) => T[])) => void\n  updateItemService: (itemId: string, updates: Partial<T>) => Promise<void>\n  projectId?: string\n}\n\nexport function useBookmark<T extends BookmarkableItem>({\n  items,\n  setItems,\n  updateItemService\n}: UseBookmarkOptions<T>) {\n  const toggleBookmark = useCallback(async (itemId: string) => {\n    try {\n      const item = items.find(item => item.item_id === itemId)\n      if (!item) return\n\n      const newBookmarkState = !item.bookmark\n\n      // Update in database\n      await updateItemService(itemId, { bookmark: newBookmarkState } as Partial<T>)\n\n      // Update local state optimistically\n      setItems(prevItems =>\n        prevItems.map(item =>\n          item.item_id === itemId\n            ? { ...item, bookmark: newBookmarkState }\n            : item\n        )\n      )\n    } catch (error) {\n      console.error('Failed to update bookmark:', error)\n      // Show error notification if available\n      alert('Failed to update bookmark. Please try again.')\n    }\n  }, [items, setItems, updateItemService])\n\n  return { toggleBookmark }\n}\n"],"names":["useBookmark","items","setItems","updateItemService","useCallback","itemId","item","newBookmarkState","prevItems","error"],"mappings":"gCAUO,SAASA,EAAwC,CACtD,MAAAC,EACA,SAAAC,EACA,kBAAAC,CACF,EAA0B,CA0BxB,MAAO,CAAE,eAzBcC,cAAY,MAAOC,GAAmB,CAC3D,GAAI,CACF,MAAMC,EAAOL,EAAM,KAAKK,GAAQA,EAAK,UAAYD,CAAM,EACvD,GAAI,CAACC,EAAM,OAEX,MAAMC,EAAmB,CAACD,EAAK,SAG/B,MAAMH,EAAkBE,EAAQ,CAAE,SAAUE,EAAgC,EAG5EL,KACEM,EAAU,IAAIF,GACZA,EAAK,UAAYD,EACb,CAAE,GAAGC,EAAM,SAAUC,GACrBD,CAAA,CACN,CAEJ,OAASG,EAAO,CACd,QAAQ,MAAM,6BAA8BA,CAAK,EAEjD,MAAM,8CAA8C,CACtD,CACF,EAAG,CAACR,EAAOC,EAAUC,CAAiB,CAAC,CAE9B,CACX"}